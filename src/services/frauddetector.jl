# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: frauddetector
using AWS.Compat
using AWS.UUIDs

"""
    batch_create_variable(variable_entries)
    batch_create_variable(variable_entries, params::Dict{String,<:Any})

Creates a batch of variables.

# Arguments
- `variable_entries`: The list of variables for the batch create variable request.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"tags"`: A collection of key and value pairs.
"""
batch_create_variable(variableEntries; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("BatchCreateVariable", Dict{String, Any}("variableEntries"=>variableEntries); aws_config=aws_config)
batch_create_variable(variableEntries, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("BatchCreateVariable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("variableEntries"=>variableEntries), params)); aws_config=aws_config)

"""
    batch_get_variable(names)
    batch_get_variable(names, params::Dict{String,<:Any})

Gets a batch of variables.

# Arguments
- `names`: The list of variable names to get.

"""
batch_get_variable(names; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("BatchGetVariable", Dict{String, Any}("names"=>names); aws_config=aws_config)
batch_get_variable(names, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("BatchGetVariable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("names"=>names), params)); aws_config=aws_config)

"""
    create_detector_version(detector_id, rules)
    create_detector_version(detector_id, rules, params::Dict{String,<:Any})

Creates a detector version. The detector version starts in a DRAFT status.

# Arguments
- `detector_id`: The ID of the detector under which you want to create a new version.
- `rules`: The rules to include in the detector version.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description of the detector version.
- `"externalModelEndpoints"`: The Amazon Sagemaker model endpoints to include in the
  detector version.
- `"modelVersions"`: The model versions to include in the detector version.
- `"ruleExecutionMode"`: The rule execution mode for the rules included in the detector
  version. You can define and edit the rule mode at the detector version level, when it is in
  draft status. If you specify FIRST_MATCHED, Amazon Fraud Detector evaluates rules
  sequentially, first to last, stopping at the first matched rule. Amazon Fraud dectector
  then provides the outcomes for that single rule. If you specifiy ALL_MATCHED, Amazon Fraud
  Detector evaluates all rules and returns the outcomes for all matched rules.  The default
  behavior is FIRST_MATCHED.
- `"tags"`: A collection of key and value pairs.
"""
create_detector_version(detectorId, rules; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateDetectorVersion", Dict{String, Any}("detectorId"=>detectorId, "rules"=>rules); aws_config=aws_config)
create_detector_version(detectorId, rules, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateDetectorVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "rules"=>rules), params)); aws_config=aws_config)

"""
    create_model(event_type_name, model_id, model_type)
    create_model(event_type_name, model_id, model_type, params::Dict{String,<:Any})

Creates a model using the specified model type.

# Arguments
- `event_type_name`: The name of the event type.
- `model_id`: The model ID.
- `model_type`: The model type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The model description.
- `"tags"`: A collection of key and value pairs.
"""
create_model(eventTypeName, modelId, modelType; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateModel", Dict{String, Any}("eventTypeName"=>eventTypeName, "modelId"=>modelId, "modelType"=>modelType); aws_config=aws_config)
create_model(eventTypeName, modelId, modelType, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateModel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("eventTypeName"=>eventTypeName, "modelId"=>modelId, "modelType"=>modelType), params)); aws_config=aws_config)

"""
    create_model_version(model_id, model_type, training_data_schema, training_data_source)
    create_model_version(model_id, model_type, training_data_schema, training_data_source, params::Dict{String,<:Any})

Creates a version of the model using the specified model type and model id.

# Arguments
- `model_id`: The model ID.
- `model_type`: The model type.
- `training_data_schema`: The training data schema.
- `training_data_source`: The training data source location in Amazon S3.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"externalEventsDetail"`: Details for the external events data used for model version
  training. Required if trainingDataSource is EXTERNAL_EVENTS.
- `"tags"`: A collection of key and value pairs.
"""
create_model_version(modelId, modelType, trainingDataSchema, trainingDataSource; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateModelVersion", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "trainingDataSchema"=>trainingDataSchema, "trainingDataSource"=>trainingDataSource); aws_config=aws_config)
create_model_version(modelId, modelType, trainingDataSchema, trainingDataSource, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateModelVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "trainingDataSchema"=>trainingDataSchema, "trainingDataSource"=>trainingDataSource), params)); aws_config=aws_config)

"""
    create_rule(detector_id, expression, language, outcomes, rule_id)
    create_rule(detector_id, expression, language, outcomes, rule_id, params::Dict{String,<:Any})

Creates a rule for use with the specified detector.

# Arguments
- `detector_id`: The detector ID for the rule's parent detector.
- `expression`: The rule expression.
- `language`: The language of the rule.
- `outcomes`: The outcome or outcomes returned when the rule expression matches.
- `rule_id`: The rule ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The rule description.
- `"tags"`: A collection of key and value pairs.
"""
create_rule(detectorId, expression, language, outcomes, ruleId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateRule", Dict{String, Any}("detectorId"=>detectorId, "expression"=>expression, "language"=>language, "outcomes"=>outcomes, "ruleId"=>ruleId); aws_config=aws_config)
create_rule(detectorId, expression, language, outcomes, ruleId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "expression"=>expression, "language"=>language, "outcomes"=>outcomes, "ruleId"=>ruleId), params)); aws_config=aws_config)

"""
    create_variable(data_source, data_type, default_value, name)
    create_variable(data_source, data_type, default_value, name, params::Dict{String,<:Any})

Creates a variable.

# Arguments
- `data_source`: The source of the data.
- `data_type`: The data type.
- `default_value`: The default value for the variable when no value is received.
- `name`: The name of the variable.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description.
- `"tags"`: A collection of key and value pairs.
- `"variableType"`: The variable type. For more information see Variable types.  Valid
  Values: AUTH_CODE | AVS | BILLING_ADDRESS_L1 | BILLING_ADDRESS_L2 | BILLING_CITY |
  BILLING_COUNTRY | BILLING_NAME | BILLING_PHONE | BILLING_STATE | BILLING_ZIP | CARD_BIN |
  CATEGORICAL | CURRENCY_CODE | EMAIL_ADDRESS | FINGERPRINT | FRAUD_LABEL | FREE_FORM_TEXT |
  IP_ADDRESS | NUMERIC | ORDER_ID | PAYMENT_TYPE | PHONE_NUMBER | PRICE | PRODUCT_CATEGORY |
  SHIPPING_ADDRESS_L1 | SHIPPING_ADDRESS_L2 | SHIPPING_CITY | SHIPPING_COUNTRY |
  SHIPPING_NAME | SHIPPING_PHONE | SHIPPING_STATE | SHIPPING_ZIP | USERAGENT
"""
create_variable(dataSource, dataType, defaultValue, name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateVariable", Dict{String, Any}("dataSource"=>dataSource, "dataType"=>dataType, "defaultValue"=>defaultValue, "name"=>name); aws_config=aws_config)
create_variable(dataSource, dataType, defaultValue, name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("CreateVariable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("dataSource"=>dataSource, "dataType"=>dataType, "defaultValue"=>defaultValue, "name"=>name), params)); aws_config=aws_config)

"""
    delete_detector(detector_id)
    delete_detector(detector_id, params::Dict{String,<:Any})

Deletes the detector. Before deleting a detector, you must first delete all detector
versions and rule versions associated with the detector. When you delete a detector, Amazon
Fraud Detector permanently deletes the detector and the data is no longer stored in Amazon
Fraud Detector.

# Arguments
- `detector_id`: The ID of the detector to delete.

"""
delete_detector(detectorId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteDetector", Dict{String, Any}("detectorId"=>detectorId); aws_config=aws_config)
delete_detector(detectorId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteDetector", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId), params)); aws_config=aws_config)

"""
    delete_detector_version(detector_id, detector_version_id)
    delete_detector_version(detector_id, detector_version_id, params::Dict{String,<:Any})

Deletes the detector version. You cannot delete detector versions that are in ACTIVE
status. When you delete a detector version, Amazon Fraud Detector permanently deletes the
detector and the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `detector_id`: The ID of the parent detector for the detector version to delete.
- `detector_version_id`: The ID of the detector version to delete.

"""
delete_detector_version(detectorId, detectorVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteDetectorVersion", Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId); aws_config=aws_config)
delete_detector_version(detectorId, detectorVersionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteDetectorVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId), params)); aws_config=aws_config)

"""
    delete_entity_type(name)
    delete_entity_type(name, params::Dict{String,<:Any})

Deletes an entity type. You cannot delete an entity type that is included in an event type.
When you delete an entity type, Amazon Fraud Detector permanently deletes that entity type
and the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `name`: The name of the entity type to delete.

"""
delete_entity_type(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEntityType", Dict{String, Any}("name"=>name); aws_config=aws_config)
delete_entity_type(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEntityType", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    delete_event(event_id, event_type_name)
    delete_event(event_id, event_type_name, params::Dict{String,<:Any})

Deletes the specified event. When you delete an event, Amazon Fraud Detector permanently
deletes that event and the event data is no longer stored in Amazon Fraud Detector.

# Arguments
- `event_id`: The ID of the event to delete.
- `event_type_name`: The name of the event type.

"""
delete_event(eventId, eventTypeName; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEvent", Dict{String, Any}("eventId"=>eventId, "eventTypeName"=>eventTypeName); aws_config=aws_config)
delete_event(eventId, eventTypeName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEvent", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("eventId"=>eventId, "eventTypeName"=>eventTypeName), params)); aws_config=aws_config)

"""
    delete_event_type(name)
    delete_event_type(name, params::Dict{String,<:Any})

Deletes an event type. You cannot delete an event type that is used in a detector or a
model. When you delete an entity type, Amazon Fraud Detector permanently deletes that
entity type and the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `name`: The name of the event type to delete.

"""
delete_event_type(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEventType", Dict{String, Any}("name"=>name); aws_config=aws_config)
delete_event_type(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteEventType", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    delete_external_model(model_endpoint)
    delete_external_model(model_endpoint, params::Dict{String,<:Any})

Removes a SageMaker model from Amazon Fraud Detector. You can remove an Amazon SageMaker
model if it is not associated with a detector version. Removing a SageMaker model
disconnects it from Amazon Fraud Detector, but the model remains available in SageMaker.

# Arguments
- `model_endpoint`: The endpoint of the Amazon Sagemaker model to delete.

"""
delete_external_model(modelEndpoint; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteExternalModel", Dict{String, Any}("modelEndpoint"=>modelEndpoint); aws_config=aws_config)
delete_external_model(modelEndpoint, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteExternalModel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelEndpoint"=>modelEndpoint), params)); aws_config=aws_config)

"""
    delete_label(name)
    delete_label(name, params::Dict{String,<:Any})

Deletes a label. You cannot delete labels that are included in an event type in Amazon
Fraud Detector. You cannot delete a label assigned to an event ID. You must first delete
the relevant event ID. When you delete a label, Amazon Fraud Detector permanently deletes
that label and the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `name`: The name of the label to delete.

"""
delete_label(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteLabel", Dict{String, Any}("name"=>name); aws_config=aws_config)
delete_label(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteLabel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    delete_model(model_id, model_type)
    delete_model(model_id, model_type, params::Dict{String,<:Any})

Deletes a model. You can delete models and model versions in Amazon Fraud Detector,
provided that they are not associated with a detector version.  When you delete a model,
Amazon Fraud Detector permanently deletes that model and the data is no longer stored in
Amazon Fraud Detector.

# Arguments
- `model_id`: The model ID of the model to delete.
- `model_type`: The model type of the model to delete.

"""
delete_model(modelId, modelType; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteModel", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType); aws_config=aws_config)
delete_model(modelId, modelType, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteModel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType), params)); aws_config=aws_config)

"""
    delete_model_version(model_id, model_type, model_version_number)
    delete_model_version(model_id, model_type, model_version_number, params::Dict{String,<:Any})

Deletes a model version. You can delete models and model versions in Amazon Fraud Detector,
provided that they are not associated with a detector version.  When you delete a model
version, Amazon Fraud Detector permanently deletes that model version and the data is no
longer stored in Amazon Fraud Detector.

# Arguments
- `model_id`: The model ID of the model version to delete.
- `model_type`: The model type of the model version to delete.
- `model_version_number`: The model version number of the model version to delete.

"""
delete_model_version(modelId, modelType, modelVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteModelVersion", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber); aws_config=aws_config)
delete_model_version(modelId, modelType, modelVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteModelVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber), params)); aws_config=aws_config)

"""
    delete_outcome(name)
    delete_outcome(name, params::Dict{String,<:Any})

Deletes an outcome. You cannot delete an outcome that is used in a rule version. When you
delete an outcome, Amazon Fraud Detector permanently deletes that outcome and the data is
no longer stored in Amazon Fraud Detector.

# Arguments
- `name`: The name of the outcome to delete.

"""
delete_outcome(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteOutcome", Dict{String, Any}("name"=>name); aws_config=aws_config)
delete_outcome(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteOutcome", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    delete_rule(rule)
    delete_rule(rule, params::Dict{String,<:Any})

Deletes the rule. You cannot delete a rule if it is used by an ACTIVE or INACTIVE detector
version. When you delete a rule, Amazon Fraud Detector permanently deletes that rule and
the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `rule`:

"""
delete_rule(rule; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteRule", Dict{String, Any}("rule"=>rule); aws_config=aws_config)
delete_rule(rule, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteRule", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("rule"=>rule), params)); aws_config=aws_config)

"""
    delete_variable(name)
    delete_variable(name, params::Dict{String,<:Any})

Deletes a variable. You can't delete variables that are included in an event type in Amazon
Fraud Detector. Amazon Fraud Detector automatically deletes model output variables and
SageMaker model output variables when you delete the model. You can't delete these
variables manually. When you delete a variable, Amazon Fraud Detector permanently deletes
that variable and the data is no longer stored in Amazon Fraud Detector.

# Arguments
- `name`: The name of the variable to delete.

"""
delete_variable(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteVariable", Dict{String, Any}("name"=>name); aws_config=aws_config)
delete_variable(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DeleteVariable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    describe_detector(detector_id)
    describe_detector(detector_id, params::Dict{String,<:Any})

Gets all versions for a specified detector.

# Arguments
- `detector_id`: The detector ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results to return for the request.
- `"nextToken"`: The next token from the previous response.
"""
describe_detector(detectorId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DescribeDetector", Dict{String, Any}("detectorId"=>detectorId); aws_config=aws_config)
describe_detector(detectorId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DescribeDetector", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId), params)); aws_config=aws_config)

"""
    describe_model_versions()
    describe_model_versions(params::Dict{String,<:Any})

Gets all of the model versions for the specified model type or for the specified model type
and model ID. You can also get details for a single, specified model version.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of results to return.
- `"modelId"`: The model ID.
- `"modelType"`: The model type.
- `"modelVersionNumber"`: The model version number.
- `"nextToken"`: The next token from the previous results.
"""
describe_model_versions(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DescribeModelVersions"; aws_config=aws_config)
describe_model_versions(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("DescribeModelVersions", params; aws_config=aws_config)

"""
    get_detector_version(detector_id, detector_version_id)
    get_detector_version(detector_id, detector_version_id, params::Dict{String,<:Any})

Gets a particular detector version.

# Arguments
- `detector_id`: The detector ID.
- `detector_version_id`: The detector version ID.

"""
get_detector_version(detectorId, detectorVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetDetectorVersion", Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId); aws_config=aws_config)
get_detector_version(detectorId, detectorVersionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetDetectorVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId), params)); aws_config=aws_config)

"""
    get_detectors()
    get_detectors(params::Dict{String,<:Any})

Gets all detectors or a single detector if a detectorId is specified. This is a paginated
API. If you provide a null maxResults, this action retrieves a maximum of 10 records per
page. If you provide a maxResults, the value must be between 5 and 10. To get the next page
results, provide the pagination token from the GetDetectorsResponse as part of your
request. A null pagination token fetches the records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"detectorId"`: The detector ID.
- `"maxResults"`: The maximum number of objects to return for the request.
- `"nextToken"`: The next token for the subsequent request.
"""
get_detectors(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetDetectors"; aws_config=aws_config)
get_detectors(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetDetectors", params; aws_config=aws_config)

"""
    get_entity_types()
    get_entity_types(params::Dict{String,<:Any})

Gets all entity types or a specific entity type if a name is specified. This is a paginated
API. If you provide a null maxResults, this action retrieves a maximum of 10 records per
page. If you provide a maxResults, the value must be between 5 and 10. To get the next page
results, provide the pagination token from the GetEntityTypesResponse as part of your
request. A null pagination token fetches the records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"name"`: The name.
- `"nextToken"`: The next token for the subsequent request.
"""
get_entity_types(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEntityTypes"; aws_config=aws_config)
get_entity_types(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEntityTypes", params; aws_config=aws_config)

"""
    get_event_prediction(detector_id, entities, event_id, event_timestamp, event_type_name, event_variables)
    get_event_prediction(detector_id, entities, event_id, event_timestamp, event_type_name, event_variables, params::Dict{String,<:Any})

Evaluates an event against a detector version. If a version ID is not provided, the
detector’s (ACTIVE) version is used.

# Arguments
- `detector_id`: The detector ID.
- `entities`: The entity type (associated with the detector's event type) and specific
  entity ID representing who performed the event. If an entity id is not available, use
  \"UNKNOWN.\"
- `event_id`: The unique ID used to identify the event.
- `event_timestamp`: Timestamp that defines when the event under evaluation occurred.
- `event_type_name`: The event type associated with the detector specified for the
  prediction.
- `event_variables`: Names of the event type's variables you defined in Amazon Fraud
  Detector to represent data elements and their corresponding values for the event you are
  sending for evaluation.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"detectorVersionId"`: The detector version ID.
- `"externalModelEndpointDataBlobs"`: The Amazon SageMaker model endpoint input data blobs.
"""
get_event_prediction(detectorId, entities, eventId, eventTimestamp, eventTypeName, eventVariables; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEventPrediction", Dict{String, Any}("detectorId"=>detectorId, "entities"=>entities, "eventId"=>eventId, "eventTimestamp"=>eventTimestamp, "eventTypeName"=>eventTypeName, "eventVariables"=>eventVariables); aws_config=aws_config)
get_event_prediction(detectorId, entities, eventId, eventTimestamp, eventTypeName, eventVariables, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEventPrediction", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "entities"=>entities, "eventId"=>eventId, "eventTimestamp"=>eventTimestamp, "eventTypeName"=>eventTypeName, "eventVariables"=>eventVariables), params)); aws_config=aws_config)

"""
    get_event_types()
    get_event_types(params::Dict{String,<:Any})

Gets all event types or a specific event type if name is provided. This is a paginated API.
If you provide a null maxResults, this action retrieves a maximum of 10 records per page.
If you provide a maxResults, the value must be between 5 and 10. To get the next page
results, provide the pagination token from the GetEventTypesResponse as part of your
request. A null pagination token fetches the records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"name"`: The name.
- `"nextToken"`: The next token for the subsequent request.
"""
get_event_types(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEventTypes"; aws_config=aws_config)
get_event_types(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetEventTypes", params; aws_config=aws_config)

"""
    get_external_models()
    get_external_models(params::Dict{String,<:Any})

Gets the details for one or more Amazon SageMaker models that have been imported into the
service. This is a paginated API. If you provide a null maxResults, this actions retrieves
a maximum of 10 records per page. If you provide a maxResults, the value must be between 5
and 10. To get the next page results, provide the pagination token from the
GetExternalModelsResult as part of your request. A null pagination token fetches the
records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"modelEndpoint"`: The Amazon SageMaker model endpoint.
- `"nextToken"`: The next page token for the request.
"""
get_external_models(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetExternalModels"; aws_config=aws_config)
get_external_models(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetExternalModels", params; aws_config=aws_config)

"""
    get_kmsencryption_key()
    get_kmsencryption_key(params::Dict{String,<:Any})

Gets the encryption key if a Key Management Service (KMS) customer master key (CMK) has
been specified to be used to encrypt content in Amazon Fraud Detector.

"""
get_kmsencryption_key(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetKMSEncryptionKey"; aws_config=aws_config)
get_kmsencryption_key(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetKMSEncryptionKey", params; aws_config=aws_config)

"""
    get_labels()
    get_labels(params::Dict{String,<:Any})

Gets all labels or a specific label if name is provided. This is a paginated API. If you
provide a null maxResults, this action retrieves a maximum of 50 records per page. If you
provide a maxResults, the value must be between 10 and 50. To get the next page results,
provide the pagination token from the GetGetLabelsResponse as part of your request. A null
pagination token fetches the records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"name"`: The name of the label or labels to get.
- `"nextToken"`: The next token for the subsequent request.
"""
get_labels(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetLabels"; aws_config=aws_config)
get_labels(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetLabels", params; aws_config=aws_config)

"""
    get_model_version(model_id, model_type, model_version_number)
    get_model_version(model_id, model_type, model_version_number, params::Dict{String,<:Any})

Gets the details of the specified model version.

# Arguments
- `model_id`: The model ID.
- `model_type`: The model type.
- `model_version_number`: The model version number.

"""
get_model_version(modelId, modelType, modelVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetModelVersion", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber); aws_config=aws_config)
get_model_version(modelId, modelType, modelVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetModelVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber), params)); aws_config=aws_config)

"""
    get_models()
    get_models(params::Dict{String,<:Any})

Gets one or more models. Gets all models for the AWS account if no model type and no model
id provided. Gets all models for the AWS account and model type, if the model type is
specified but model id is not provided. Gets a specific model if (model type, model id)
tuple is specified.  This is a paginated API. If you provide a null maxResults, this action
retrieves a maximum of 10 records per page. If you provide a maxResults, the value must be
between 1 and 10. To get the next page results, provide the pagination token from the
response as part of your request. A null pagination token fetches the records from the
beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"modelId"`: The model ID.
- `"modelType"`: The model type.
- `"nextToken"`: The next token for the subsequent request.
"""
get_models(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetModels"; aws_config=aws_config)
get_models(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetModels", params; aws_config=aws_config)

"""
    get_outcomes()
    get_outcomes(params::Dict{String,<:Any})

Gets one or more outcomes. This is a paginated API. If you provide a null maxResults, this
actions retrieves a maximum of 100 records per page. If you provide a maxResults, the value
must be between 50 and 100. To get the next page results, provide the pagination token from
the GetOutcomesResult as part of your request. A null pagination token fetches the records
from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"name"`: The name of the outcome or outcomes to get.
- `"nextToken"`: The next page token for the request.
"""
get_outcomes(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetOutcomes"; aws_config=aws_config)
get_outcomes(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetOutcomes", params; aws_config=aws_config)

"""
    get_rules(detector_id)
    get_rules(detector_id, params::Dict{String,<:Any})

Get all rules for a detector (paginated) if ruleId and ruleVersion are not specified. Gets
all rules for the detector and the ruleId if present (paginated). Gets a specific rule if
both the ruleId and the ruleVersion are specified. This is a paginated API. Providing null
maxResults results in retrieving maximum of 100 records per page. If you provide maxResults
the value must be between 50 and 100. To get the next page result, a provide a pagination
token from GetRulesResult as part of your request. Null pagination token fetches the
records from the beginning.

# Arguments
- `detector_id`: The detector ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of rules to return for the request.
- `"nextToken"`: The next page token.
- `"ruleId"`: The rule ID.
- `"ruleVersion"`: The rule version.
"""
get_rules(detectorId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetRules", Dict{String, Any}("detectorId"=>detectorId); aws_config=aws_config)
get_rules(detectorId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetRules", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId), params)); aws_config=aws_config)

"""
    get_variables()
    get_variables(params::Dict{String,<:Any})

Gets all of the variables or the specific variable. This is a paginated API. Providing null
maxSizePerPage results in retrieving maximum of 100 records per page. If you provide
maxSizePerPage the value must be between 50 and 100. To get the next page result, a provide
a pagination token from GetVariablesResult as part of your request. Null pagination token
fetches the records from the beginning.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The max size per page determined for the get variable request.
- `"name"`: The name of the variable.
- `"nextToken"`: The next page token of the get variable request.
"""
get_variables(; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetVariables"; aws_config=aws_config)
get_variables(params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("GetVariables", params; aws_config=aws_config)

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists all tags associated with the resource. This is a paginated API. To get the next page
results, provide the pagination token from the response as part of your request. A null
pagination token fetches the records from the beginning.

# Arguments
- `resource_arn`: The ARN that specifies the resource whose tags you want to list.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"maxResults"`: The maximum number of objects to return for the request.
- `"nextToken"`: The next token from the previous results.
"""
list_tags_for_resource(resourceARN; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("ListTagsForResource", Dict{String, Any}("resourceARN"=>resourceARN); aws_config=aws_config)
list_tags_for_resource(resourceARN, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("ListTagsForResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN), params)); aws_config=aws_config)

"""
    put_detector(detector_id, event_type_name)
    put_detector(detector_id, event_type_name, params::Dict{String,<:Any})

Creates or updates a detector.

# Arguments
- `detector_id`: The detector ID.
- `event_type_name`: The name of the event type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description of the detector.
- `"tags"`: A collection of key and value pairs.
"""
put_detector(detectorId, eventTypeName; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutDetector", Dict{String, Any}("detectorId"=>detectorId, "eventTypeName"=>eventTypeName); aws_config=aws_config)
put_detector(detectorId, eventTypeName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutDetector", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "eventTypeName"=>eventTypeName), params)); aws_config=aws_config)

"""
    put_entity_type(name)
    put_entity_type(name, params::Dict{String,<:Any})

Creates or updates an entity type. An entity represents who is performing the event. As
part of a fraud prediction, you pass the entity ID to indicate the specific entity who
performed the event. An entity type classifies the entity. Example classifications include
customer, merchant, or account.

# Arguments
- `name`: The name of the entity type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description.
- `"tags"`: A collection of key and value pairs.
"""
put_entity_type(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutEntityType", Dict{String, Any}("name"=>name); aws_config=aws_config)
put_entity_type(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutEntityType", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    put_event_type(entity_types, event_variables, name)
    put_event_type(entity_types, event_variables, name, params::Dict{String,<:Any})

Creates or updates an event type. An event is a business activity that is evaluated for
fraud risk. With Amazon Fraud Detector, you generate fraud predictions for events. An event
type defines the structure for an event sent to Amazon Fraud Detector. This includes the
variables sent as part of the event, the entity performing the event (such as a customer),
and the labels that classify the event. Example event types include online payment
transactions, account registrations, and authentications.

# Arguments
- `entity_types`: The entity type for the event type. Example entity types: customer,
  merchant, account.
- `event_variables`: The event type variables.
- `name`: The name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description of the event type.
- `"labels"`: The event type labels.
- `"tags"`: A collection of key and value pairs.
"""
put_event_type(entityTypes, eventVariables, name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutEventType", Dict{String, Any}("entityTypes"=>entityTypes, "eventVariables"=>eventVariables, "name"=>name); aws_config=aws_config)
put_event_type(entityTypes, eventVariables, name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutEventType", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("entityTypes"=>entityTypes, "eventVariables"=>eventVariables, "name"=>name), params)); aws_config=aws_config)

"""
    put_external_model(input_configuration, invoke_model_endpoint_role_arn, model_endpoint, model_endpoint_status, model_source, output_configuration)
    put_external_model(input_configuration, invoke_model_endpoint_role_arn, model_endpoint, model_endpoint_status, model_source, output_configuration, params::Dict{String,<:Any})

Creates or updates an Amazon SageMaker model endpoint. You can also use this action to
update the configuration of the model endpoint, including the IAM role and/or the mapped
variables.

# Arguments
- `input_configuration`: The model endpoint input configuration.
- `invoke_model_endpoint_role_arn`: The IAM role used to invoke the model endpoint.
- `model_endpoint`: The model endpoints name.
- `model_endpoint_status`: The model endpoint’s status in Amazon Fraud Detector.
- `model_source`: The source of the model.
- `output_configuration`: The model endpoint output configuration.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"tags"`: A collection of key and value pairs.
"""
put_external_model(inputConfiguration, invokeModelEndpointRoleArn, modelEndpoint, modelEndpointStatus, modelSource, outputConfiguration; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutExternalModel", Dict{String, Any}("inputConfiguration"=>inputConfiguration, "invokeModelEndpointRoleArn"=>invokeModelEndpointRoleArn, "modelEndpoint"=>modelEndpoint, "modelEndpointStatus"=>modelEndpointStatus, "modelSource"=>modelSource, "outputConfiguration"=>outputConfiguration); aws_config=aws_config)
put_external_model(inputConfiguration, invokeModelEndpointRoleArn, modelEndpoint, modelEndpointStatus, modelSource, outputConfiguration, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutExternalModel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("inputConfiguration"=>inputConfiguration, "invokeModelEndpointRoleArn"=>invokeModelEndpointRoleArn, "modelEndpoint"=>modelEndpoint, "modelEndpointStatus"=>modelEndpointStatus, "modelSource"=>modelSource, "outputConfiguration"=>outputConfiguration), params)); aws_config=aws_config)

"""
    put_kmsencryption_key(kms_encryption_key_arn)
    put_kmsencryption_key(kms_encryption_key_arn, params::Dict{String,<:Any})

Specifies the Key Management Service (KMS) customer master key (CMK) to be used to encrypt
content in Amazon Fraud Detector.

# Arguments
- `kms_encryption_key_arn`: The KMS encryption key ARN.

"""
put_kmsencryption_key(kmsEncryptionKeyArn; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutKMSEncryptionKey", Dict{String, Any}("kmsEncryptionKeyArn"=>kmsEncryptionKeyArn); aws_config=aws_config)
put_kmsencryption_key(kmsEncryptionKeyArn, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutKMSEncryptionKey", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("kmsEncryptionKeyArn"=>kmsEncryptionKeyArn), params)); aws_config=aws_config)

"""
    put_label(name)
    put_label(name, params::Dict{String,<:Any})

Creates or updates label. A label classifies an event as fraudulent or legitimate. Labels
are associated with event types and used to train supervised machine learning models in
Amazon Fraud Detector.

# Arguments
- `name`: The label name.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The label description.
- `"tags"`:
"""
put_label(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutLabel", Dict{String, Any}("name"=>name); aws_config=aws_config)
put_label(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutLabel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    put_outcome(name)
    put_outcome(name, params::Dict{String,<:Any})

Creates or updates an outcome.

# Arguments
- `name`: The name of the outcome.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The outcome description.
- `"tags"`: A collection of key and value pairs.
"""
put_outcome(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutOutcome", Dict{String, Any}("name"=>name); aws_config=aws_config)
put_outcome(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("PutOutcome", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Assigns tags to a resource.

# Arguments
- `resource_arn`: The resource ARN.
- `tags`: The tags to assign to the resource.

"""
tag_resource(resourceARN, tags; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("TagResource", Dict{String, Any}("resourceARN"=>resourceARN, "tags"=>tags); aws_config=aws_config)
tag_resource(resourceARN, tags, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("TagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN, "tags"=>tags), params)); aws_config=aws_config)

"""
    untag_resource(resource_arn, tag_keys)
    untag_resource(resource_arn, tag_keys, params::Dict{String,<:Any})

Removes tags from a resource.

# Arguments
- `resource_arn`: The ARN of the resource from which to remove the tag.
- `tag_keys`: The resource ARN.

"""
untag_resource(resourceARN, tagKeys; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UntagResource", Dict{String, Any}("resourceARN"=>resourceARN, "tagKeys"=>tagKeys); aws_config=aws_config)
untag_resource(resourceARN, tagKeys, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UntagResource", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("resourceARN"=>resourceARN, "tagKeys"=>tagKeys), params)); aws_config=aws_config)

"""
    update_detector_version(detector_id, detector_version_id, external_model_endpoints, rules)
    update_detector_version(detector_id, detector_version_id, external_model_endpoints, rules, params::Dict{String,<:Any})

 Updates a detector version. The detector version attributes that you can update include
models, external model endpoints, rules, rule execution mode, and description. You can only
update a DRAFT detector version.

# Arguments
- `detector_id`: The parent detector ID for the detector version you want to update.
- `detector_version_id`: The detector version ID.
- `external_model_endpoints`: The Amazon SageMaker model endpoints to include in the
  detector version.
- `rules`: The rules to include in the detector version.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The detector version description.
- `"modelVersions"`: The model versions to include in the detector version.
- `"ruleExecutionMode"`: The rule execution mode to add to the detector. If you specify
  FIRST_MATCHED, Amazon Fraud Detector evaluates rules sequentially, first to last, stopping
  at the first matched rule. Amazon Fraud dectector then provides the outcomes for that
  single rule. If you specifiy ALL_MATCHED, Amazon Fraud Detector evaluates all rules and
  returns the outcomes for all matched rules. You can define and edit the rule mode at the
  detector version level, when it is in draft status. The default behavior is FIRST_MATCHED.
"""
update_detector_version(detectorId, detectorVersionId, externalModelEndpoints, rules; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersion", Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId, "externalModelEndpoints"=>externalModelEndpoints, "rules"=>rules); aws_config=aws_config)
update_detector_version(detectorId, detectorVersionId, externalModelEndpoints, rules, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId, "externalModelEndpoints"=>externalModelEndpoints, "rules"=>rules), params)); aws_config=aws_config)

"""
    update_detector_version_metadata(description, detector_id, detector_version_id)
    update_detector_version_metadata(description, detector_id, detector_version_id, params::Dict{String,<:Any})

Updates the detector version's description. You can update the metadata for any detector
version (DRAFT, ACTIVE, or INACTIVE).

# Arguments
- `description`: The description.
- `detector_id`: The detector ID.
- `detector_version_id`: The detector version ID.

"""
update_detector_version_metadata(description, detectorId, detectorVersionId; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersionMetadata", Dict{String, Any}("description"=>description, "detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId); aws_config=aws_config)
update_detector_version_metadata(description, detectorId, detectorVersionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersionMetadata", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("description"=>description, "detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId), params)); aws_config=aws_config)

"""
    update_detector_version_status(detector_id, detector_version_id, status)
    update_detector_version_status(detector_id, detector_version_id, status, params::Dict{String,<:Any})

Updates the detector version’s status. You can perform the following promotions or
demotions using UpdateDetectorVersionStatus: DRAFT to ACTIVE, ACTIVE to INACTIVE, and
INACTIVE to ACTIVE.

# Arguments
- `detector_id`: The detector ID.
- `detector_version_id`: The detector version ID.
- `status`: The new status.

"""
update_detector_version_status(detectorId, detectorVersionId, status; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersionStatus", Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId, "status"=>status); aws_config=aws_config)
update_detector_version_status(detectorId, detectorVersionId, status, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateDetectorVersionStatus", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("detectorId"=>detectorId, "detectorVersionId"=>detectorVersionId, "status"=>status), params)); aws_config=aws_config)

"""
    update_model(model_id, model_type)
    update_model(model_id, model_type, params::Dict{String,<:Any})

Updates a model. You can update the description attribute using this action.

# Arguments
- `model_id`: The model ID.
- `model_type`: The model type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The new model description.
"""
update_model(modelId, modelType; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModel", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType); aws_config=aws_config)
update_model(modelId, modelType, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModel", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType), params)); aws_config=aws_config)

"""
    update_model_version(major_version_number, model_id, model_type)
    update_model_version(major_version_number, model_id, model_type, params::Dict{String,<:Any})

Updates a model version. Updating a model version retrains an existing model version using
updated training data and produces a new minor version of the model. You can update the
training data set location and data access role attributes using this action. This action
creates and trains a new minor version of the model, for example version 1.01, 1.02, 1.03.

# Arguments
- `major_version_number`: The major version number.
- `model_id`: The model ID.
- `model_type`: The model type.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"externalEventsDetail"`: The event details.
- `"tags"`: A collection of key and value pairs.
"""
update_model_version(majorVersionNumber, modelId, modelType; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModelVersion", Dict{String, Any}("majorVersionNumber"=>majorVersionNumber, "modelId"=>modelId, "modelType"=>modelType); aws_config=aws_config)
update_model_version(majorVersionNumber, modelId, modelType, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModelVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("majorVersionNumber"=>majorVersionNumber, "modelId"=>modelId, "modelType"=>modelType), params)); aws_config=aws_config)

"""
    update_model_version_status(model_id, model_type, model_version_number, status)
    update_model_version_status(model_id, model_type, model_version_number, status, params::Dict{String,<:Any})

Updates the status of a model version. You can perform the following status updates:
Change the TRAINING_COMPLETE status to ACTIVE.   Change ACTIVEto INACTIVE.

# Arguments
- `model_id`: The model ID of the model version to update.
- `model_type`: The model type.
- `model_version_number`: The model version number.
- `status`: The model version status.

"""
update_model_version_status(modelId, modelType, modelVersionNumber, status; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModelVersionStatus", Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber, "status"=>status); aws_config=aws_config)
update_model_version_status(modelId, modelType, modelVersionNumber, status, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateModelVersionStatus", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("modelId"=>modelId, "modelType"=>modelType, "modelVersionNumber"=>modelVersionNumber, "status"=>status), params)); aws_config=aws_config)

"""
    update_rule_metadata(description, rule)
    update_rule_metadata(description, rule, params::Dict{String,<:Any})

Updates a rule's metadata. The description attribute can be updated.

# Arguments
- `description`: The rule description.
- `rule`: The rule to update.

"""
update_rule_metadata(description, rule; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateRuleMetadata", Dict{String, Any}("description"=>description, "rule"=>rule); aws_config=aws_config)
update_rule_metadata(description, rule, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateRuleMetadata", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("description"=>description, "rule"=>rule), params)); aws_config=aws_config)

"""
    update_rule_version(expression, language, outcomes, rule)
    update_rule_version(expression, language, outcomes, rule, params::Dict{String,<:Any})

Updates a rule version resulting in a new rule version. Updates a rule version resulting in
a new rule version (version 1, 2, 3 ...).

# Arguments
- `expression`: The rule expression.
- `language`: The language.
- `outcomes`: The outcomes.
- `rule`: The rule to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"description"`: The description.
- `"tags"`: The tags to assign to the rule version.
"""
update_rule_version(expression, language, outcomes, rule; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateRuleVersion", Dict{String, Any}("expression"=>expression, "language"=>language, "outcomes"=>outcomes, "rule"=>rule); aws_config=aws_config)
update_rule_version(expression, language, outcomes, rule, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateRuleVersion", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("expression"=>expression, "language"=>language, "outcomes"=>outcomes, "rule"=>rule), params)); aws_config=aws_config)

"""
    update_variable(name)
    update_variable(name, params::Dict{String,<:Any})

Updates a variable.

# Arguments
- `name`: The name of the variable.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"defaultValue"`: The new default value of the variable.
- `"description"`: The new description.
- `"variableType"`: The variable type. For more information see Variable types.
"""
update_variable(name; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateVariable", Dict{String, Any}("name"=>name); aws_config=aws_config)
update_variable(name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = frauddetector("UpdateVariable", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("name"=>name), params)); aws_config=aws_config)

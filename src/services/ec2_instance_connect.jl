# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: ec2_instance_connect
using AWS.Compat
using AWS.UUIDs

"""
    send_sshpublic_key(availability_zone, instance_id, instance_osuser, sshpublic_key)
    send_sshpublic_key(availability_zone, instance_id, instance_osuser, sshpublic_key, params::Dict{String,<:Any})

Pushes an SSH public key to a particular OS user on a given EC2 instance for 60 seconds.

# Arguments
- `availability_zone`: The availability zone the EC2 instance was launched in.
- `instance_id`: The EC2 instance you wish to publish the SSH key to.
- `instance_osuser`: The OS user on the EC2 instance whom the key may be used to
  authenticate as.
- `sshpublic_key`: The public key to be published to the instance. To use it after
  publication you must have the matching private key.

"""
send_sshpublic_key(AvailabilityZone, InstanceId, InstanceOSUser, SSHPublicKey; aws_config::AbstractAWSConfig=global_aws_config()) = ec2_instance_connect("SendSSHPublicKey", Dict{String, Any}("AvailabilityZone"=>AvailabilityZone, "InstanceId"=>InstanceId, "InstanceOSUser"=>InstanceOSUser, "SSHPublicKey"=>SSHPublicKey); aws_config=aws_config)
send_sshpublic_key(AvailabilityZone, InstanceId, InstanceOSUser, SSHPublicKey, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = ec2_instance_connect("SendSSHPublicKey", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AvailabilityZone"=>AvailabilityZone, "InstanceId"=>InstanceId, "InstanceOSUser"=>InstanceOSUser, "SSHPublicKey"=>SSHPublicKey), params)); aws_config=aws_config)

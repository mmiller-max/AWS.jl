# This file is auto-generated by AWSMetadata.jl
using AWS
using AWS.AWSServices: quicksight
using AWS.Compat
using AWS.UUIDs

"""
    cancel_ingestion(aws_account_id, data_set_id, ingestion_id)
    cancel_ingestion(aws_account_id, data_set_id, ingestion_id, params::Dict{String,<:Any})

Cancels an ongoing ingestion of data into SPICE.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID of the dataset used in the ingestion.
- `ingestion_id`: An ID for the ingestion.

"""
cancel_ingestion(AwsAccountId, DataSetId, IngestionId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)"; aws_config=aws_config)
cancel_ingestion(AwsAccountId, DataSetId, IngestionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", params; aws_config=aws_config)

"""
    create_account_customization(account_customization, aws_account_id)
    create_account_customization(account_customization, aws_account_id, params::Dict{String,<:Any})

Creates Amazon QuickSight customizations the current AWS Region. Currently, you can add a
custom default theme by using the CreateAccountCustomization or UpdateAccountCustomization
API operation. To further customize QuickSight by removing QuickSight sample assets and
videos for all new users, see Customizing QuickSight in the Amazon QuickSight User Guide.
You can create customizations for your AWS account or, if you specify a namespace, for a
QuickSight namespace instead. Customizations that apply to a namespace always override
customizations that apply to an AWS account. To find out which customizations apply, use
the DescribeAccountCustomization API operation. Before you use the
CreateAccountCustomization API operation to add a theme as the namespace default, make sure
that you first share the theme with the namespace. If you don't share it with the
namespace, the theme isn't visible to your users even if you make it the default theme. To
check if the theme is shared, view the current permissions by using the
DescribeThemePermissions  API operation. To share the theme, grant permissions by using the
 UpdateThemePermissions  API operation.

# Arguments
- `account_customization`: The QuickSight customizations you're adding in the current AWS
  Region. You can add these to an AWS account and a QuickSight namespace.  For example, you
  can add a default theme by setting AccountCustomization to the midnight theme:
  \"AccountCustomization\": { \"DefaultTheme\": \"arn:aws:quicksight::aws:theme/MIDNIGHT\" }.
  Or, you can add a custom theme by specifying \"AccountCustomization\": { \"DefaultTheme\":
  \"arn:aws:quicksight:us-west-2:111122223333:theme/bdb844d0-0fe9-4d9d-b520-0fe602d93639\" }.
- `aws_account_id`: The ID for the AWS account that you want to customize QuickSight for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: A list of the tags that you want to attach to this resource.
- `"namespace"`: The QuickSight namespace that you want to add customizations to.
"""
create_account_customization(AccountCustomization, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization); aws_config=aws_config)
create_account_customization(AccountCustomization, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountCustomization"=>AccountCustomization), params)); aws_config=aws_config)

"""
    create_analysis(analysis_id, aws_account_id, name, source_entity)
    create_analysis(analysis_id, aws_account_id, name, source_entity, params::Dict{String,<:Any})

Creates an analysis in Amazon QuickSight.

# Arguments
- `analysis_id`: The ID for the analysis that you're creating. This ID displays in the URL
  of the analysis.
- `aws_account_id`: The ID of the AWS account where you are creating an analysis.
- `name`: A descriptive name for the analysis that you're creating. This name displays for
  the analysis in the QuickSight console.
- `source_entity`: A source entity to use for the analysis that you're creating. This
  metadata structure contains details that describe a source template and one or more
  datasets.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: The parameter names and override values that you want to use. An analysis
  can have any parameter type, and some parameters might accept multiple values.
- `"Permissions"`: A structure that describes the principals and the resource-level
  permissions on an analysis. You can use the Permissions structure to grant permissions by
  providing a list of AWS Identity and Access Management (IAM) action information for each
  principal listed by Amazon Resource Name (ARN).  To specify no permissions, omit
  Permissions.
- `"Tags"`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the analysis.
- `"ThemeArn"`: The ARN for the theme to apply to the analysis that you're creating. To see
  the theme in the QuickSight console, make sure that you have access to it.
"""
create_analysis(AnalysisId, AwsAccountId, Name, SourceEntity; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity); aws_config=aws_config)
create_analysis(AnalysisId, AwsAccountId, Name, SourceEntity, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    create_dashboard(aws_account_id, dashboard_id, name, source_entity)
    create_dashboard(aws_account_id, dashboard_id, name, source_entity, params::Dict{String,<:Any})

Creates a dashboard from a template. To first create a template, see the  CreateTemplate
API operation. A dashboard is an entity in QuickSight that identifies QuickSight reports,
created from analyses. You can share QuickSight dashboards. With the right permissions, you
can create scheduled email reports from them. If you have the correct permissions, you can
create a dashboard from a template that exists in a different AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account where you want to create the dashboard.
- `dashboard_id`: The ID for the dashboard, also added to the IAM policy.
- `name`: The display name of the dashboard.
- `source_entity`: The entity that you are using as a source when you create the dashboard.
  In SourceEntity, you specify the type of object you're using as source. You can only create
  a dashboard from a template, so you use a SourceTemplate entity. If you need to create a
  dashboard from an analysis, first convert the analysis to a template by using the
  CreateTemplate API operation. For SourceTemplate, specify the Amazon Resource Name (ARN) of
  the source template. The SourceTemplateARN can contain any AWS Account and any
  QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate to
  list the replacement datasets for the placeholders listed in the original. The schema in
  each dataset must match its placeholder.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DashboardPublishOptions"`: Options for publishing the dashboard when you create it:
  AvailabilityStatus for AdHocFilteringOption - This status can be either ENABLED or
  DISABLED. When this is set to DISABLED, QuickSight disables the left filter pane on the
  published dashboard, which can be used for ad hoc (one-time) filtering. This option is
  ENABLED by default.     AvailabilityStatus for ExportToCSVOption - This status can be
  either ENABLED or DISABLED. The visual option to export data to .CSV format isn't enabled
  when this is set to DISABLED. This option is ENABLED by default.     VisibilityState for
  SheetControlsOption - This visibility state can be either COLLAPSED or EXPANDED. This
  option is COLLAPSED by default.
- `"Parameters"`: The parameters for the creation of the dashboard, which you want to use
  to override the default settings. A dashboard can have any type of parameters, and some
  parameters might accept multiple values.
- `"Permissions"`: A structure that contains the permissions of the dashboard. You can use
  this structure for granting permissions by providing a list of IAM action information for
  each principal ARN.  To specify no permissions, omit the permissions list.
- `"Tags"`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the dashboard.
- `"ThemeArn"`: The Amazon Resource Name (ARN) of the theme that is being used for this
  dashboard. If you add a value for this field, it overrides the value that is used in the
  source entity. The theme ARN must exist in the same AWS account where you create the
  dashboard.
- `"VersionDescription"`: A description for the first version of the dashboard being
  created.
"""
create_dashboard(AwsAccountId, DashboardId, Name, SourceEntity; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity); aws_config=aws_config)
create_dashboard(AwsAccountId, DashboardId, Name, SourceEntity, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    create_data_set(aws_account_id, data_set_id, import_mode, name, physical_table_map)
    create_data_set(aws_account_id, data_set_id, import_mode, name, physical_table_map, params::Dict{String,<:Any})

Creates a dataset.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: An ID for the dataset that you want to create. This ID is unique per AWS
  Region for each AWS account.
- `import_mode`: Indicates whether you want to import the data into SPICE.
- `name`: The display name for the dataset.
- `physical_table_map`: Declares the physical tables that are available in the underlying
  data sources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ColumnGroups"`: Groupings of columns that work together in certain QuickSight features.
  Currently, only geospatial hierarchy is supported.
- `"ColumnLevelPermissionRules"`: A set of one or more definitions of a
  ColumnLevelPermissionRule .
- `"FieldFolders"`: The folder that contains fields and nested subfolders for your dataset.
- `"LogicalTableMap"`: Configures the combination and transformation of the data from the
  physical tables.
- `"Permissions"`: A list of resource permissions on the dataset.
- `"RowLevelPermissionDataSet"`: The row-level security configuration for the data that you
  want to create.
- `"Tags"`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the dataset.
"""
create_data_set(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets", Dict{String, Any}("DataSetId"=>DataSetId, "ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap); aws_config=aws_config)
create_data_set(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DataSetId"=>DataSetId, "ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap), params)); aws_config=aws_config)

"""
    create_data_source(aws_account_id, data_source_id, name, type)
    create_data_source(aws_account_id, data_source_id, name, type, params::Dict{String,<:Any})

Creates a data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: An ID for the data source. This ID is unique per AWS Region for each
  AWS account.
- `name`: A display name for the data source.
- `type`: The type of the data source. Currently, the supported types for this operation
  are: ATHENA, AURORA, AURORA_POSTGRESQL, AMAZON_ELASTICSEARCH, MARIADB, MYSQL, POSTGRESQL,
  PRESTO, REDSHIFT, S3, SNOWFLAKE, SPARK, SQLSERVER, TERADATA. Use ListDataSources to return
  a list of all data sources.  AMAZON_ELASTICSEARCH is for Amazon managed Elasticsearch
  Service.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Credentials"`: The credentials QuickSight that uses to connect to your underlying
  source. Currently, only credentials based on user name and password are supported.
- `"DataSourceParameters"`: The parameters that QuickSight uses to connect to your
  underlying source.
- `"Permissions"`: A list of resource permissions on the data source.
- `"SslProperties"`: Secure Socket Layer (SSL) properties that apply when QuickSight
  connects to your underlying source.
- `"Tags"`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the data source.
- `"VpcConnectionProperties"`: Use this parameter only when you want QuickSight to use a
  VPC connection when connecting to your underlying source.
"""
create_data_source(AwsAccountId, DataSourceId, Name, Type; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources", Dict{String, Any}("DataSourceId"=>DataSourceId, "Name"=>Name, "Type"=>Type); aws_config=aws_config)
create_data_source(AwsAccountId, DataSourceId, Name, Type, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DataSourceId"=>DataSourceId, "Name"=>Name, "Type"=>Type), params)); aws_config=aws_config)

"""
    create_group(aws_account_id, group_name, namespace)
    create_group(aws_account_id, group_name, namespace, params::Dict{String,<:Any})

Creates an Amazon QuickSight group. The permissions resource is
arn:aws:quicksight:us-east-1:&lt;relevant-aws-account-id&gt;:group/default/&lt;group-name&gt
; . The response is a group object.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: A name for the group that you want to create.
- `namespace`: The namespace. Currently, you should set this to default.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: A description for the group that you want to create.
"""
create_group(AwsAccountId, GroupName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", Dict{String, Any}("GroupName"=>GroupName); aws_config=aws_config)
create_group(AwsAccountId, GroupName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("GroupName"=>GroupName), params)); aws_config=aws_config)

"""
    create_group_membership(aws_account_id, group_name, member_name, namespace)
    create_group_membership(aws_account_id, group_name, member_name, namespace, params::Dict{String,<:Any})

Adds an Amazon QuickSight user to an Amazon QuickSight group.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to add the user to.
- `member_name`: The name of the user that you want to add to the group membership.
- `namespace`: The namespace. Currently, you should set this to default.

"""
create_group_membership(AwsAccountId, GroupName, MemberName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)"; aws_config=aws_config)
create_group_membership(AwsAccountId, GroupName, MemberName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)", params; aws_config=aws_config)

"""
    create_iampolicy_assignment(assignment_name, assignment_status, aws_account_id, namespace)
    create_iampolicy_assignment(assignment_name, assignment_status, aws_account_id, namespace, params::Dict{String,<:Any})

Creates an assignment with one specified IAM policy, identified by its Amazon Resource Name
(ARN). This policy assignment is attached to the specified groups or users of Amazon
QuickSight. Assignment names are unique per AWS account. To avoid overwriting rules in
other namespaces, use assignment names that are unique.

# Arguments
- `assignment_name`: The name of the assignment, also called a rule. It must be unique
  within an AWS account.
- `assignment_status`: The status of the assignment. Possible values are as follows:
  ENABLED - Anything specified in this assignment is used when creating the data source.
  DISABLED - This assignment isn't used when creating the data source.    DRAFT - This
  assignment is an unfinished draft and isn't used when creating the data source.
- `aws_account_id`: The ID of the AWS account where you want to assign an IAM policy to
  QuickSight users or groups.
- `namespace`: The namespace that contains the assignment.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Identities"`: The QuickSight users, groups, or both that you want to assign the policy
  to.
- `"PolicyArn"`: The ARN for the IAM policy to apply to the QuickSight users and groups
  specified in this assignment.
"""
create_iampolicy_assignment(AssignmentName, AssignmentStatus, AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/", Dict{String, Any}("AssignmentName"=>AssignmentName, "AssignmentStatus"=>AssignmentStatus); aws_config=aws_config)
create_iampolicy_assignment(AssignmentName, AssignmentStatus, AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AssignmentName"=>AssignmentName, "AssignmentStatus"=>AssignmentStatus), params)); aws_config=aws_config)

"""
    create_ingestion(aws_account_id, data_set_id, ingestion_id)
    create_ingestion(aws_account_id, data_set_id, ingestion_id, params::Dict{String,<:Any})

Creates and starts a new SPICE ingestion on a dataset Any ingestions operating on tagged
datasets inherit the same tags automatically for use in access control. For an example, see
How do I create an IAM policy to control access to Amazon EC2 resources using tags? in the
AWS Knowledge Center. Tags are visible on the tagged dataset, but not on the ingestion
resource.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID of the dataset used in the ingestion.
- `ingestion_id`: An ID for the ingestion.

"""
create_ingestion(AwsAccountId, DataSetId, IngestionId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)"; aws_config=aws_config)
create_ingestion(AwsAccountId, DataSetId, IngestionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", params; aws_config=aws_config)

"""
    create_namespace(aws_account_id, identity_store, namespace)
    create_namespace(aws_account_id, identity_store, namespace, params::Dict{String,<:Any})

(Enterprise edition only) Creates a new namespace for you to use with Amazon QuickSight. A
namespace allows you to isolate the QuickSight users and groups that are registered for
that namespace. Users that access the namespace can share assets only with other users or
groups in the same namespace. They can't see users and groups in other namespaces. You can
create a namespace after your AWS account is subscribed to QuickSight. The namespace must
be unique within the AWS account. By default, there is a limit of 100 namespaces per AWS
account. To increase your limit, create a ticket with AWS Support.

# Arguments
- `aws_account_id`: The ID for the AWS account that you want to create the QuickSight
  namespace in.
- `identity_store`: Specifies the type of your user identity directory. Currently, this
  supports users with an identity type of QUICKSIGHT.
- `namespace`: The name that you want to use to describe the new namespace.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Tags"`: The tags that you want to associate with the namespace that you're creating.
"""
create_namespace(AwsAccountId, IdentityStore, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)", Dict{String, Any}("IdentityStore"=>IdentityStore, "Namespace"=>Namespace); aws_config=aws_config)
create_namespace(AwsAccountId, IdentityStore, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("IdentityStore"=>IdentityStore, "Namespace"=>Namespace), params)); aws_config=aws_config)

"""
    create_template(aws_account_id, source_entity, template_id)
    create_template(aws_account_id, source_entity, template_id, params::Dict{String,<:Any})

Creates a template from an existing QuickSight analysis or template. You can use the
resulting template to create a dashboard. A template is an entity in QuickSight that
encapsulates the metadata required to create an analysis and that you can use to create s
dashboard. A template adds a layer of abstraction by using placeholders to replace the
dataset associated with the analysis. You can use templates to create dashboards by
replacing dataset placeholders with datasets that follow the same schema that was used to
create the source analysis and template.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `source_entity`: The entity that you are using as a source when you create the template.
  In SourceEntity, you specify the type of object you're using as source: SourceTemplate for
  a template or SourceAnalysis for an analysis. Both of these require an Amazon Resource Name
  (ARN). For SourceTemplate, specify the ARN of the source template. For SourceAnalysis,
  specify the ARN of the source analysis. The SourceTemplate ARN can contain any AWS Account
  and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within
  SourceTemplate or SourceAnalysis to list the replacement datasets for the placeholders
  listed in the original. The schema in each dataset must match its placeholder.
- `template_id`: An ID for the template that you want to create. This template is unique
  per AWS Region in each AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Name"`: A display name for the template.
- `"Permissions"`: A list of resource permissions to be set on the template.
- `"Tags"`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the resource.
- `"VersionDescription"`: A description of the current template version being created. This
  API operation creates the first version of the template. Every time UpdateTemplate is
  called, a new version is created. Each version of the template maintains a description of
  the version in the VersionDescription field.
"""
create_template(AwsAccountId, SourceEntity, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity); aws_config=aws_config)
create_template(AwsAccountId, SourceEntity, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    create_template_alias(alias_name, aws_account_id, template_id, template_version_number)
    create_template_alias(alias_name, aws_account_id, template_id, template_version_number, params::Dict{String,<:Any})

Creates a template alias for a template.

# Arguments
- `alias_name`: The name that you want to give to the template alias that you're creating.
  Don't start the alias name with the  character. Alias names that start with  are reserved
  by QuickSight.
- `aws_account_id`: The ID of the AWS account that contains the template that you creating
  an alias for.
- `template_id`: An ID for the template.
- `template_version_number`: The version number of the template.

"""
create_template_alias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber); aws_config=aws_config)
create_template_alias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber), params)); aws_config=aws_config)

"""
    create_theme(aws_account_id, base_theme_id, configuration, name, theme_id)
    create_theme(aws_account_id, base_theme_id, configuration, name, theme_id, params::Dict{String,<:Any})

Creates a theme. A theme is set of configuration options for color and layout. Themes apply
to analyses and dashboards. For more information, see Using Themes in Amazon QuickSight in
the Amazon QuickSight User Guide.

# Arguments
- `aws_account_id`: The ID of the AWS account where you want to store the new theme.
- `base_theme_id`: The ID of the theme that a custom theme will inherit from. All themes
  inherit from one of the starting themes defined by Amazon QuickSight. For a list of the
  starting themes, use ListThemes or choose Themes from within a QuickSight analysis.
- `configuration`: The theme configuration, which contains the theme display properties.
- `name`: A display name for the theme.
- `theme_id`: An ID for the theme that you want to create. The theme ID is unique per AWS
  Region in each AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Permissions"`: A valid grouping of resource permissions to apply to the new theme.
- `"Tags"`: A map of the key-value pairs for the resource tag or tags that you want to add
  to the resource.
- `"VersionDescription"`: A description of the first version of the theme that you're
  creating. Every time UpdateTheme is called, a new version is created. Each version of the
  theme has a description of the version in the VersionDescription field.
"""
create_theme(AwsAccountId, BaseThemeId, Configuration, Name, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId, "Configuration"=>Configuration, "Name"=>Name); aws_config=aws_config)
create_theme(AwsAccountId, BaseThemeId, Configuration, Name, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BaseThemeId"=>BaseThemeId, "Configuration"=>Configuration, "Name"=>Name), params)); aws_config=aws_config)

"""
    create_theme_alias(alias_name, aws_account_id, theme_id, theme_version_number)
    create_theme_alias(alias_name, aws_account_id, theme_id, theme_version_number, params::Dict{String,<:Any})

Creates a theme alias for a theme.

# Arguments
- `alias_name`: The name that you want to give to the theme alias that you are creating.
  The alias name can't begin with a . Alias names that start with  are reserved by Amazon
  QuickSight.
- `aws_account_id`: The ID of the AWS account that contains the theme for the new theme
  alias.
- `theme_id`: An ID for the theme alias.
- `theme_version_number`: The version number of the theme.

"""
create_theme_alias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber); aws_config=aws_config)
create_theme_alias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber), params)); aws_config=aws_config)

"""
    delete_account_customization(aws_account_id)
    delete_account_customization(aws_account_id, params::Dict{String,<:Any})

Deletes all Amazon QuickSight customizations in this AWS Region for the specified AWS
account and QuickSight namespace.

# Arguments
- `aws_account_id`: The ID for the AWS account that you want to delete QuickSight
  customizations from in this AWS Region.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"namespace"`: The QuickSight namespace that you're deleting the customizations from.
"""
delete_account_customization(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/customizations"; aws_config=aws_config)
delete_account_customization(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/customizations", params; aws_config=aws_config)

"""
    delete_analysis(analysis_id, aws_account_id)
    delete_analysis(analysis_id, aws_account_id, params::Dict{String,<:Any})

Deletes an analysis from Amazon QuickSight. You can optionally include a recovery window
during which you can restore the analysis. If you don't specify a recovery window value,
the operation defaults to 30 days. QuickSight attaches a DeletionTime stamp to the response
that specifies the end of the recovery window. At the end of the recovery window,
QuickSight deletes the analysis permanently. At any time before recovery window ends, you
can use the RestoreAnalysis API operation to remove the DeletionTime stamp and cancel the
deletion of the analysis. The analysis remains visible in the API until it's deleted, so
you can describe it but you can't make a template from it. An analysis that's scheduled for
deletion isn't accessible in the QuickSight console. To access it in the console, restore
it. Deleting an analysis doesn't delete the dashboards that you publish from it.

# Arguments
- `analysis_id`: The ID of the analysis that you're deleting.
- `aws_account_id`: The ID of the AWS account where you want to delete an analysis.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"force-delete-without-recovery"`: This option defaults to the value
  NoForceDeleteWithoutRecovery. To immediately delete the analysis, add the
  ForceDeleteWithoutRecovery option. You can't restore an analysis after it's deleted.
- `"recovery-window-in-days"`: A value that specifies the number of days that QuickSight
  waits before it deletes the analysis. You can't use this parameter with the
  ForceDeleteWithoutRecovery option in the same API call. The default value is 30.
"""
delete_analysis(AnalysisId, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)"; aws_config=aws_config)
delete_analysis(AnalysisId, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", params; aws_config=aws_config)

"""
    delete_dashboard(aws_account_id, dashboard_id)
    delete_dashboard(aws_account_id, dashboard_id, params::Dict{String,<:Any})

Deletes a dashboard.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  deleting.
- `dashboard_id`: The ID for the dashboard.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"version-number"`: The version number of the dashboard. If the version number property
  is provided, only the specified version of the dashboard is deleted.
"""
delete_dashboard(AwsAccountId, DashboardId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)"; aws_config=aws_config)
delete_dashboard(AwsAccountId, DashboardId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", params; aws_config=aws_config)

"""
    delete_data_set(aws_account_id, data_set_id)
    delete_data_set(aws_account_id, data_set_id, params::Dict{String,<:Any})

Deletes a dataset.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID for the dataset that you want to create. This ID is unique per AWS
  Region for each AWS account.

"""
delete_data_set(AwsAccountId, DataSetId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)"; aws_config=aws_config)
delete_data_set(AwsAccountId, DataSetId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", params; aws_config=aws_config)

"""
    delete_data_source(aws_account_id, data_source_id)
    delete_data_source(aws_account_id, data_source_id, params::Dict{String,<:Any})

Deletes the data source permanently. This operation breaks all the datasets that reference
the deleted data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: The ID of the data source. This ID is unique per AWS Region for each
  AWS account.

"""
delete_data_source(AwsAccountId, DataSourceId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)"; aws_config=aws_config)
delete_data_source(AwsAccountId, DataSourceId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", params; aws_config=aws_config)

"""
    delete_group(aws_account_id, group_name, namespace)
    delete_group(aws_account_id, group_name, namespace, params::Dict{String,<:Any})

Removes a user group from Amazon QuickSight.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to delete.
- `namespace`: The namespace. Currently, you should set this to default.

"""
delete_group(AwsAccountId, GroupName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)"; aws_config=aws_config)
delete_group(AwsAccountId, GroupName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", params; aws_config=aws_config)

"""
    delete_group_membership(aws_account_id, group_name, member_name, namespace)
    delete_group_membership(aws_account_id, group_name, member_name, namespace, params::Dict{String,<:Any})

Removes a user from a group so that the user is no longer a member of the group.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to delete the user from.
- `member_name`: The name of the user that you want to delete from the group membership.
- `namespace`: The namespace. Currently, you should set this to default.

"""
delete_group_membership(AwsAccountId, GroupName, MemberName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)"; aws_config=aws_config)
delete_group_membership(AwsAccountId, GroupName, MemberName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members/$(MemberName)", params; aws_config=aws_config)

"""
    delete_iampolicy_assignment(assignment_name, aws_account_id, namespace)
    delete_iampolicy_assignment(assignment_name, aws_account_id, namespace, params::Dict{String,<:Any})

Deletes an existing IAM policy assignment.

# Arguments
- `assignment_name`: The name of the assignment.
- `aws_account_id`: The AWS account ID where you want to delete the IAM policy assignment.
- `namespace`: The namespace that contains the assignment.

"""
delete_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespace/$(Namespace)/iam-policy-assignments/$(AssignmentName)"; aws_config=aws_config)
delete_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespace/$(Namespace)/iam-policy-assignments/$(AssignmentName)", params; aws_config=aws_config)

"""
    delete_namespace(aws_account_id, namespace)
    delete_namespace(aws_account_id, namespace, params::Dict{String,<:Any})

Deletes a namespace and the users and groups that are associated with the namespace. This
is an asynchronous process. Assets including dashboards, analyses, datasets and data
sources are not deleted. To delete these assets, you use the API operations for the
relevant asset.

# Arguments
- `aws_account_id`: The ID for the AWS account that you want to delete the QuickSight
  namespace from.
- `namespace`: The namespace that you want to delete.

"""
delete_namespace(AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)"; aws_config=aws_config)
delete_namespace(AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)", params; aws_config=aws_config)

"""
    delete_template(aws_account_id, template_id)
    delete_template(aws_account_id, template_id, params::Dict{String,<:Any})

Deletes a template.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template that you're
  deleting.
- `template_id`: An ID for the template you want to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"version-number"`: Specifies the version of the template that you want to delete. If you
  don't provide a version number, DeleteTemplate deletes all versions of the template.
"""
delete_template(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)"; aws_config=aws_config)
delete_template(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", params; aws_config=aws_config)

"""
    delete_template_alias(alias_name, aws_account_id, template_id)
    delete_template_alias(alias_name, aws_account_id, template_id, params::Dict{String,<:Any})

Deletes the item that the specified template alias points to. If you provide a specific
alias, you delete the version of the template that the alias points to.

# Arguments
- `alias_name`: The name for the template alias. To delete a specific alias, you delete the
  version that the alias points to. You can specify the alias name, or specify the latest
  version of the template by providing the keyword LATEST in the AliasName parameter.
- `aws_account_id`: The ID of the AWS account that contains the item to delete.
- `template_id`: The ID for the template that the specified alias is for.

"""
delete_template_alias(AliasName, AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)"; aws_config=aws_config)
delete_template_alias(AliasName, AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", params; aws_config=aws_config)

"""
    delete_theme(aws_account_id, theme_id)
    delete_theme(aws_account_id, theme_id, params::Dict{String,<:Any})

Deletes a theme.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme that you're deleting.
- `theme_id`: An ID for the theme that you want to delete.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"version-number"`: The version of the theme that you want to delete.   Note: If you
  don't provide a version number, you're using this call to DeleteTheme to delete all
  versions of the theme.
"""
delete_theme(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)"; aws_config=aws_config)
delete_theme(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", params; aws_config=aws_config)

"""
    delete_theme_alias(alias_name, aws_account_id, theme_id)
    delete_theme_alias(alias_name, aws_account_id, theme_id, params::Dict{String,<:Any})

Deletes the version of the theme that the specified theme alias points to. If you provide a
specific alias, you delete the version of the theme that the alias points to.

# Arguments
- `alias_name`: The unique name for the theme alias to delete.
- `aws_account_id`: The ID of the AWS account that contains the theme alias to delete.
- `theme_id`: The ID for the theme that the specified alias is for.

"""
delete_theme_alias(AliasName, AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)"; aws_config=aws_config)
delete_theme_alias(AliasName, AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", params; aws_config=aws_config)

"""
    delete_user(aws_account_id, namespace, user_name)
    delete_user(aws_account_id, namespace, user_name, params::Dict{String,<:Any})

Deletes the Amazon QuickSight user that is associated with the identity of the AWS Identity
and Access Management (IAM) user or role that's making the call. The IAM user isn't deleted
as a result of this call.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.
- `user_name`: The name of the user that you want to delete.

"""
delete_user(AwsAccountId, Namespace, UserName; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)"; aws_config=aws_config)
delete_user(AwsAccountId, Namespace, UserName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", params; aws_config=aws_config)

"""
    delete_user_by_principal_id(aws_account_id, namespace, principal_id)
    delete_user_by_principal_id(aws_account_id, namespace, principal_id, params::Dict{String,<:Any})

Deletes a user identified by its principal ID.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.
- `principal_id`: The principal ID of the user.

"""
delete_user_by_principal_id(AwsAccountId, Namespace, PrincipalId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/user-principals/$(PrincipalId)"; aws_config=aws_config)
delete_user_by_principal_id(AwsAccountId, Namespace, PrincipalId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/user-principals/$(PrincipalId)", params; aws_config=aws_config)

"""
    describe_account_customization(aws_account_id)
    describe_account_customization(aws_account_id, params::Dict{String,<:Any})

Describes the customizations associated with the provided AWS account and Amazon QuickSight
namespace in an AWS Region. The QuickSight console evaluates which customizations to apply
by running this API operation with the Resolved flag included.  To determine what
customizations display when you run this command, it can help to visualize the relationship
of the entities involved.     AWS Account - The AWS account exists at the top of the
hierarchy. It has the potential to use all of the AWS Regions and AWS Services. When you
subscribe to QuickSight, you choose one AWS Region to use as your home Region. That's where
your free SPICE capacity is located. You can use QuickSight in any supported AWS Region.
 AWS Region - In each AWS Region where you sign in to QuickSight at least once, QuickSight
acts as a separate instance of the same service. If you have a user directory, it resides
in us-east-1, which is the US East (N. Virginia). Generally speaking, these users have
access to QuickSight in any AWS Region, unless they are constrained to a namespace.  To run
the command in a different AWS Region, you change your Region settings. If you're using the
AWS CLI, you can use one of the following options:   Use command line options.    Use named
profiles.    Run aws configure to change your default AWS Region. Use Enter to key the same
settings for your keys. For more information, see Configuring the AWS CLI.      Namespace -
A QuickSight namespace is a partition that contains users and assets (data sources,
datasets, dashboards, and so on). To access assets that are in a specific namespace, users
and groups must also be part of the same namespace. People who share a namespace are
completely isolated from users and assets in other namespaces, even if they are in the same
AWS account and AWS Region.    Applied customizations - Within an AWS Region, a set of
QuickSight customizations can apply to an AWS account or to a namespace. Settings that you
apply to a namespace override settings that you apply to an AWS account. All settings are
isolated to a single AWS Region. To apply them in other AWS Regions, run the
CreateAccountCustomization command in each AWS Region where you want to apply the same
customizations.

# Arguments
- `aws_account_id`: The ID for the AWS account that you want to describe QuickSight
  customizations for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"namespace"`: The QuickSight namespace that you want to describe QuickSight
  customizations for.
- `"resolved"`: The Resolved flag works with the other parameters to determine which view
  of QuickSight customizations is returned. You can add this flag to your command to use the
  same view that QuickSight uses to identify which customizations to apply to the console.
  Omit this flag, or set it to no-resolved, to reveal customizations that are configured at
  different levels.
"""
describe_account_customization(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/customizations"; aws_config=aws_config)
describe_account_customization(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/customizations", params; aws_config=aws_config)

"""
    describe_account_settings(aws_account_id)
    describe_account_settings(aws_account_id, params::Dict{String,<:Any})

Describes the settings that were used when your QuickSight subscription was first created
in this AWS account.

# Arguments
- `aws_account_id`: The ID for the AWS account that contains the settings that you want to
  list.

"""
describe_account_settings(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/settings"; aws_config=aws_config)
describe_account_settings(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/settings", params; aws_config=aws_config)

"""
    describe_analysis(analysis_id, aws_account_id)
    describe_analysis(analysis_id, aws_account_id, params::Dict{String,<:Any})

Provides a summary of the metadata for an analysis.

# Arguments
- `analysis_id`: The ID of the analysis that you're describing. The ID is part of the URL
  of the analysis.
- `aws_account_id`: The ID of the AWS account that contains the analysis. You must be using
  the AWS account that the analysis is in.

"""
describe_analysis(AnalysisId, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)"; aws_config=aws_config)
describe_analysis(AnalysisId, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", params; aws_config=aws_config)

"""
    describe_analysis_permissions(analysis_id, aws_account_id)
    describe_analysis_permissions(analysis_id, aws_account_id, params::Dict{String,<:Any})

Provides the read and write permissions for an analysis.

# Arguments
- `analysis_id`: The ID of the analysis whose permissions you're describing. The ID is part
  of the analysis URL.
- `aws_account_id`: The ID of the AWS account that contains the analysis whose permissions
  you're describing. You must be using the AWS account that the analysis is in.

"""
describe_analysis_permissions(AnalysisId, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)/permissions"; aws_config=aws_config)
describe_analysis_permissions(AnalysisId, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)/permissions", params; aws_config=aws_config)

"""
    describe_dashboard(aws_account_id, dashboard_id)
    describe_dashboard(aws_account_id, dashboard_id, params::Dict{String,<:Any})

Provides a summary for a dashboard.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  describing.
- `dashboard_id`: The ID for the dashboard.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"alias-name"`: The alias name.
- `"version-number"`: The version number for the dashboard. If a version number isn't
  passed, the latest published dashboard version is described.
"""
describe_dashboard(AwsAccountId, DashboardId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)"; aws_config=aws_config)
describe_dashboard(AwsAccountId, DashboardId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", params; aws_config=aws_config)

"""
    describe_dashboard_permissions(aws_account_id, dashboard_id)
    describe_dashboard_permissions(aws_account_id, dashboard_id, params::Dict{String,<:Any})

Describes read and write permissions for a dashboard.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  describing permissions for.
- `dashboard_id`: The ID for the dashboard, also added to the IAM policy.

"""
describe_dashboard_permissions(AwsAccountId, DashboardId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions"; aws_config=aws_config)
describe_dashboard_permissions(AwsAccountId, DashboardId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions", params; aws_config=aws_config)

"""
    describe_data_set(aws_account_id, data_set_id)
    describe_data_set(aws_account_id, data_set_id, params::Dict{String,<:Any})

Describes a dataset.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID for the dataset that you want to create. This ID is unique per AWS
  Region for each AWS account.

"""
describe_data_set(AwsAccountId, DataSetId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)"; aws_config=aws_config)
describe_data_set(AwsAccountId, DataSetId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", params; aws_config=aws_config)

"""
    describe_data_set_permissions(aws_account_id, data_set_id)
    describe_data_set_permissions(aws_account_id, data_set_id, params::Dict{String,<:Any})

Describes the permissions on a dataset. The permissions resource is
arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID for the dataset that you want to create. This ID is unique per AWS
  Region for each AWS account.

"""
describe_data_set_permissions(AwsAccountId, DataSetId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions"; aws_config=aws_config)
describe_data_set_permissions(AwsAccountId, DataSetId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions", params; aws_config=aws_config)

"""
    describe_data_source(aws_account_id, data_source_id)
    describe_data_source(aws_account_id, data_source_id, params::Dict{String,<:Any})

Describes a data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: The ID of the data source. This ID is unique per AWS Region for each
  AWS account.

"""
describe_data_source(AwsAccountId, DataSourceId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)"; aws_config=aws_config)
describe_data_source(AwsAccountId, DataSourceId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", params; aws_config=aws_config)

"""
    describe_data_source_permissions(aws_account_id, data_source_id)
    describe_data_source_permissions(aws_account_id, data_source_id, params::Dict{String,<:Any})

Describes the resource permissions for a data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: The ID of the data source. This ID is unique per AWS Region for each
  AWS account.

"""
describe_data_source_permissions(AwsAccountId, DataSourceId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions"; aws_config=aws_config)
describe_data_source_permissions(AwsAccountId, DataSourceId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions", params; aws_config=aws_config)

"""
    describe_group(aws_account_id, group_name, namespace)
    describe_group(aws_account_id, group_name, namespace, params::Dict{String,<:Any})

Returns an Amazon QuickSight group's description and Amazon Resource Name (ARN).

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to describe.
- `namespace`: The namespace. Currently, you should set this to default.

"""
describe_group(AwsAccountId, GroupName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)"; aws_config=aws_config)
describe_group(AwsAccountId, GroupName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", params; aws_config=aws_config)

"""
    describe_iampolicy_assignment(assignment_name, aws_account_id, namespace)
    describe_iampolicy_assignment(assignment_name, aws_account_id, namespace, params::Dict{String,<:Any})

Describes an existing IAM policy assignment, as specified by the assignment name.

# Arguments
- `assignment_name`: The name of the assignment, also called a rule.
- `aws_account_id`: The ID of the AWS account that contains the assignment that you want to
  describe.
- `namespace`: The namespace that contains the assignment.

"""
describe_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)"; aws_config=aws_config)
describe_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)", params; aws_config=aws_config)

"""
    describe_ingestion(aws_account_id, data_set_id, ingestion_id)
    describe_ingestion(aws_account_id, data_set_id, ingestion_id, params::Dict{String,<:Any})

Describes a SPICE ingestion.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID of the dataset used in the ingestion.
- `ingestion_id`: An ID for the ingestion.

"""
describe_ingestion(AwsAccountId, DataSetId, IngestionId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)"; aws_config=aws_config)
describe_ingestion(AwsAccountId, DataSetId, IngestionId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions/$(IngestionId)", params; aws_config=aws_config)

"""
    describe_namespace(aws_account_id, namespace)
    describe_namespace(aws_account_id, namespace, params::Dict{String,<:Any})

Describes the current namespace.

# Arguments
- `aws_account_id`: The ID for the AWS account that contains the QuickSight namespace that
  you want to describe.
- `namespace`: The namespace that you want to describe.

"""
describe_namespace(AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)"; aws_config=aws_config)
describe_namespace(AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)", params; aws_config=aws_config)

"""
    describe_template(aws_account_id, template_id)
    describe_template(aws_account_id, template_id, params::Dict{String,<:Any})

Describes a template's metadata.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template that you're
  describing.
- `template_id`: The ID for the template.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"alias-name"`: The alias of the template that you want to describe. If you name a
  specific alias, you describe the version that the alias points to. You can specify the
  latest version of the template by providing the keyword LATEST in the AliasName parameter.
  The keyword PUBLISHED doesn't apply to templates.
- `"version-number"`: (Optional) The number for the version to describe. If a VersionNumber
  parameter value isn't provided, the latest version of the template is described.
"""
describe_template(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)"; aws_config=aws_config)
describe_template(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", params; aws_config=aws_config)

"""
    describe_template_alias(alias_name, aws_account_id, template_id)
    describe_template_alias(alias_name, aws_account_id, template_id, params::Dict{String,<:Any})

Describes the template alias for a template.

# Arguments
- `alias_name`: The name of the template alias that you want to describe. If you name a
  specific alias, you describe the version that the alias points to. You can specify the
  latest version of the template by providing the keyword LATEST in the AliasName parameter.
  The keyword PUBLISHED doesn't apply to templates.
- `aws_account_id`: The ID of the AWS account that contains the template alias that you're
  describing.
- `template_id`: The ID for the template.

"""
describe_template_alias(AliasName, AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)"; aws_config=aws_config)
describe_template_alias(AliasName, AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", params; aws_config=aws_config)

"""
    describe_template_permissions(aws_account_id, template_id)
    describe_template_permissions(aws_account_id, template_id, params::Dict{String,<:Any})

Describes read and write permissions on a template.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template that you're
  describing.
- `template_id`: The ID for the template.

"""
describe_template_permissions(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions"; aws_config=aws_config)
describe_template_permissions(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions", params; aws_config=aws_config)

"""
    describe_theme(aws_account_id, theme_id)
    describe_theme(aws_account_id, theme_id, params::Dict{String,<:Any})

Describes a theme.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme that you're
  describing.
- `theme_id`: The ID for the theme.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"alias-name"`: The alias of the theme that you want to describe. If you name a specific
  alias, you describe the version that the alias points to. You can specify the latest
  version of the theme by providing the keyword LATEST in the AliasName parameter. The
  keyword PUBLISHED doesn't apply to themes.
- `"version-number"`: The version number for the version to describe. If a VersionNumber
  parameter value isn't provided, the latest version of the theme is described.
"""
describe_theme(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)"; aws_config=aws_config)
describe_theme(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", params; aws_config=aws_config)

"""
    describe_theme_alias(alias_name, aws_account_id, theme_id)
    describe_theme_alias(alias_name, aws_account_id, theme_id, params::Dict{String,<:Any})

Describes the alias for a theme.

# Arguments
- `alias_name`: The name of the theme alias that you want to describe.
- `aws_account_id`: The ID of the AWS account that contains the theme alias that you're
  describing.
- `theme_id`: The ID for the theme.

"""
describe_theme_alias(AliasName, AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)"; aws_config=aws_config)
describe_theme_alias(AliasName, AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", params; aws_config=aws_config)

"""
    describe_theme_permissions(aws_account_id, theme_id)
    describe_theme_permissions(aws_account_id, theme_id, params::Dict{String,<:Any})

Describes the read and write permissions for a theme.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme that you're
  describing.
- `theme_id`: The ID for the theme that you want to describe permissions for.

"""
describe_theme_permissions(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions"; aws_config=aws_config)
describe_theme_permissions(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions", params; aws_config=aws_config)

"""
    describe_user(aws_account_id, namespace, user_name)
    describe_user(aws_account_id, namespace, user_name, params::Dict{String,<:Any})

Returns information about a user, given the user name.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.
- `user_name`: The name of the user that you want to describe.

"""
describe_user(AwsAccountId, Namespace, UserName; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)"; aws_config=aws_config)
describe_user(AwsAccountId, Namespace, UserName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", params; aws_config=aws_config)

"""
    get_dashboard_embed_url(aws_account_id, dashboard_id, creds-type)
    get_dashboard_embed_url(aws_account_id, dashboard_id, creds-type, params::Dict{String,<:Any})

Generates a session URL and authorization code that you can use to embed an Amazon
QuickSight read-only dashboard in your web server code. Before you use this command, make
sure that you have configured the dashboards and permissions.  Currently, you can use
GetDashboardEmbedURL only from the server, not from the user's browser. The following rules
apply to the combination of URL and authorization code:   They must be used together.
They can be used one time only.   They are valid for 5 minutes after you run this command.
 The resulting user session is valid for 10 hours.   For more information, see Embedded
Analytics in the Amazon QuickSight User Guide.

# Arguments
- `aws_account_id`: The ID for the AWS account that contains the dashboard that you're
  embedding.
- `dashboard_id`: The ID for the dashboard, also added to the AWS Identity and Access
  Management (IAM) policy.
- `creds-type`: The authentication method that the user uses to sign in.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"additional-dashboard-ids"`: A list of one or more dashboard IDs that you want to add to
  a session that includes anonymous users. The IdentityType parameter must be set to
  ANONYMOUS for this to work, because other identity types authenticate as QuickSight or IAM
  users. For example, if you set \"--dashboard-id dash_id1 --dashboard-id dash_id2 dash_id3
  identity-type ANONYMOUS\", the session can access all three dashboards.
- `"namespace"`: The QuickSight namespace that contains the dashboard IDs in this request.
  If you're not using a custom namespace, set this to \"default\".
- `"reset-disabled"`: Remove the reset button on the embedded dashboard. The default is
  FALSE, which enables the reset button.
- `"session-lifetime"`: How many minutes the session is valid. The session lifetime must be
  15-600 minutes.
- `"state-persistence-enabled"`: Adds persistence of state for the user session in an
  embedded dashboard. Persistence applies to the sheet and the parameter settings. These are
  control settings that the dashboard subscriber (QuickSight reader) chooses while viewing
  the dashboard. If this is set to TRUE, the settings are the same when the subscriber
  reopens the same dashboard URL. The state is stored in QuickSight, not in a browser cookie.
  If this is set to FALSE, the state of the user session is not persisted. The default is
  FALSE.
- `"undo-redo-disabled"`: Remove the undo/redo button on the embedded dashboard. The
  default is FALSE, which enables the undo/redo button.
- `"user-arn"`: The Amazon QuickSight user's Amazon Resource Name (ARN), for use with
  QUICKSIGHT identity type. You can use this for any Amazon QuickSight users in your account
  (readers, authors, or admins) authenticated as one of the following:   Active Directory
  (AD) users or group members   Invited nonfederated users   IAM users and IAM role-based
  sessions authenticated through Federated Single Sign-On using SAML, OpenID Connect, or IAM
  federation.   Omit this parameter for users in the third group – IAM users and IAM
  role-based sessions.
"""
get_dashboard_embed_url(AwsAccountId, DashboardId, creds_type; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/embed-url", Dict{String, Any}("creds-type"=>creds_type); aws_config=aws_config)
get_dashboard_embed_url(AwsAccountId, DashboardId, creds_type, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/embed-url", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("creds-type"=>creds_type), params)); aws_config=aws_config)

"""
    get_session_embed_url(aws_account_id)
    get_session_embed_url(aws_account_id, params::Dict{String,<:Any})

Generates a session URL and authorization code that you can use to embed the Amazon
QuickSight console in your web server code. Use GetSessionEmbedUrl where you want to
provide an authoring portal that allows users to create data sources, datasets, analyses,
and dashboards. The users who access an embedded QuickSight console need belong to the
author or admin security cohort. If you want to restrict permissions to some of these
features, add a custom permissions profile to the user with the  UpdateUser  API operation.
Use  RegisterUser  API operation to add a new user with a custom permission profile
attached. For more information, see the following sections in the Amazon QuickSight User
Guide:    Embedding the Amazon QuickSight Console     Customizing Access to the Amazon
QuickSight Console

# Arguments
- `aws_account_id`: The ID for the AWS account associated with your QuickSight subscription.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"entry-point"`: The URL you use to access the embedded session. The entry point URL is
  constrained to the following paths:    /start     /start/analyses     /start/dashboards
  /start/favorites     /dashboards/DashboardId  - where DashboardId is the actual ID key from
  the QuickSight console URL of the dashboard    /analyses/AnalysisId  - where AnalysisId is
  the actual ID key from the QuickSight console URL of the analysis
- `"session-lifetime"`: How many minutes the session is valid. The session lifetime must be
  15-600 minutes.
- `"user-arn"`: The Amazon QuickSight user's Amazon Resource Name (ARN), for use with
  QUICKSIGHT identity type. You can use this for any type of Amazon QuickSight users in your
  account (readers, authors, or admins). They need to be authenticated as one of the
  following:   Active Directory (AD) users or group members   Invited nonfederated users
  AWS Identity and Access Management (IAM) users and IAM role-based sessions authenticated
  through Federated Single Sign-On using SAML, OpenID Connect, or IAM federation   Omit this
  parameter for users in the third group, IAM users and IAM role-based sessions.
"""
get_session_embed_url(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/session-embed-url"; aws_config=aws_config)
get_session_embed_url(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/session-embed-url", params; aws_config=aws_config)

"""
    list_analyses(aws_account_id)
    list_analyses(aws_account_id, params::Dict{String,<:Any})

Lists Amazon QuickSight analyses that exist in the specified AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the analyses.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_analyses(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses"; aws_config=aws_config)
list_analyses(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/analyses", params; aws_config=aws_config)

"""
    list_dashboard_versions(aws_account_id, dashboard_id)
    list_dashboard_versions(aws_account_id, dashboard_id, params::Dict{String,<:Any})

Lists all the versions of the dashboards in the QuickSight subscription.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  listing versions for.
- `dashboard_id`: The ID for the dashboard.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_dashboard_versions(AwsAccountId, DashboardId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions"; aws_config=aws_config)
list_dashboard_versions(AwsAccountId, DashboardId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions", params; aws_config=aws_config)

"""
    list_dashboards(aws_account_id)
    list_dashboards(aws_account_id, params::Dict{String,<:Any})

Lists dashboards in an AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboards that you're
  listing.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_dashboards(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards"; aws_config=aws_config)
list_dashboards(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/dashboards", params; aws_config=aws_config)

"""
    list_data_sets(aws_account_id)
    list_data_sets(aws_account_id, params::Dict{String,<:Any})

Lists all of the datasets belonging to the current AWS account in an AWS Region. The
permissions resource is arn:aws:quicksight:region:aws-account-id:dataset/*.

# Arguments
- `aws_account_id`: The AWS account ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_data_sets(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets"; aws_config=aws_config)
list_data_sets(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets", params; aws_config=aws_config)

"""
    list_data_sources(aws_account_id)
    list_data_sources(aws_account_id, params::Dict{String,<:Any})

Lists data sources in current AWS Region that belong to this AWS account.

# Arguments
- `aws_account_id`: The AWS account ID.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_data_sources(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources"; aws_config=aws_config)
list_data_sources(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sources", params; aws_config=aws_config)

"""
    list_group_memberships(aws_account_id, group_name, namespace)
    list_group_memberships(aws_account_id, group_name, namespace, params::Dict{String,<:Any})

Lists member users in a group.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to see a membership list of.
- `namespace`: The namespace. Currently, you should set this to default.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return from this request.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_group_memberships(AwsAccountId, GroupName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members"; aws_config=aws_config)
list_group_memberships(AwsAccountId, GroupName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)/members", params; aws_config=aws_config)

"""
    list_groups(aws_account_id, namespace)
    list_groups(aws_account_id, namespace, params::Dict{String,<:Any})

Lists all user groups in Amazon QuickSight.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_groups(AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups"; aws_config=aws_config)
list_groups(AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups", params; aws_config=aws_config)

"""
    list_iampolicy_assignments(aws_account_id, namespace)
    list_iampolicy_assignments(aws_account_id, namespace, params::Dict{String,<:Any})

Lists IAM policy assignments in the current Amazon QuickSight account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains these IAM policy assignments.
- `namespace`: The namespace for the assignments.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AssignmentStatus"`: The status of the assignments.
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_iampolicy_assignments(AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments"; aws_config=aws_config)
list_iampolicy_assignments(AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments", params; aws_config=aws_config)

"""
    list_iampolicy_assignments_for_user(aws_account_id, namespace, user_name)
    list_iampolicy_assignments_for_user(aws_account_id, namespace, user_name, params::Dict{String,<:Any})

Lists all the IAM policy assignments, including the Amazon Resource Names (ARNs) for the
IAM policies assigned to the specified user and group or groups that the user belongs to.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the assignments.
- `namespace`: The namespace of the assignment.
- `user_name`: The name of the user.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_iampolicy_assignments_for_user(AwsAccountId, Namespace, UserName; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/iam-policy-assignments"; aws_config=aws_config)
list_iampolicy_assignments_for_user(AwsAccountId, Namespace, UserName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/iam-policy-assignments", params; aws_config=aws_config)

"""
    list_ingestions(aws_account_id, data_set_id)
    list_ingestions(aws_account_id, data_set_id, params::Dict{String,<:Any})

Lists the history of SPICE ingestions for a dataset.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID of the dataset used in the ingestion.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_ingestions(AwsAccountId, DataSetId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions"; aws_config=aws_config)
list_ingestions(AwsAccountId, DataSetId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/ingestions", params; aws_config=aws_config)

"""
    list_namespaces(aws_account_id)
    list_namespaces(aws_account_id, params::Dict{String,<:Any})

Lists the namespaces for the specified AWS account.

# Arguments
- `aws_account_id`: The ID for the AWS account that contains the QuickSight namespaces that
  you want to list.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_namespaces(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces"; aws_config=aws_config)
list_namespaces(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces", params; aws_config=aws_config)

"""
    list_tags_for_resource(resource_arn)
    list_tags_for_resource(resource_arn, params::Dict{String,<:Any})

Lists the tags assigned to a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource that you want a list of
  tags for.

"""
list_tags_for_resource(ResourceArn; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/resources/$(ResourceArn)/tags"; aws_config=aws_config)
list_tags_for_resource(ResourceArn, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/resources/$(ResourceArn)/tags", params; aws_config=aws_config)

"""
    list_template_aliases(aws_account_id, template_id)
    list_template_aliases(aws_account_id, template_id, params::Dict{String,<:Any})

Lists all the aliases of a template.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template aliases that
  you're listing.
- `template_id`: The ID for the template.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-result"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_template_aliases(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases"; aws_config=aws_config)
list_template_aliases(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases", params; aws_config=aws_config)

"""
    list_template_versions(aws_account_id, template_id)
    list_template_versions(aws_account_id, template_id, params::Dict{String,<:Any})

Lists all the versions of the templates in the current Amazon QuickSight account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the templates that you're
  listing.
- `template_id`: The ID for the template.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_template_versions(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/versions"; aws_config=aws_config)
list_template_versions(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/versions", params; aws_config=aws_config)

"""
    list_templates(aws_account_id)
    list_templates(aws_account_id, params::Dict{String,<:Any})

Lists all the templates in the current Amazon QuickSight account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the templates that you're
  listing.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-result"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_templates(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates"; aws_config=aws_config)
list_templates(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/templates", params; aws_config=aws_config)

"""
    list_theme_aliases(aws_account_id, theme_id)
    list_theme_aliases(aws_account_id, theme_id, params::Dict{String,<:Any})

Lists all the aliases of a theme.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme aliases that you're
  listing.
- `theme_id`: The ID for the theme.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-result"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_theme_aliases(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases"; aws_config=aws_config)
list_theme_aliases(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases", params; aws_config=aws_config)

"""
    list_theme_versions(aws_account_id, theme_id)
    list_theme_versions(aws_account_id, theme_id, params::Dict{String,<:Any})

Lists all the versions of the themes in the current AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the themes that you're listing.
- `theme_id`: The ID for the theme.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
"""
list_theme_versions(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/versions"; aws_config=aws_config)
list_theme_versions(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/versions", params; aws_config=aws_config)

"""
    list_themes(aws_account_id)
    list_themes(aws_account_id, params::Dict{String,<:Any})

Lists all the themes in the current AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the themes that you're listing.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to be returned per request.
- `"next-token"`: The token for the next set of results, or null if there are no more
  results.
- `"type"`: The type of themes that you want to list. Valid options include the following:
    ALL (default)- Display all existing themes.    CUSTOM - Display only the themes created
  by people using Amazon QuickSight.    QUICKSIGHT - Display only the starting themes defined
  by QuickSight.
"""
list_themes(AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes"; aws_config=aws_config)
list_themes(AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/themes", params; aws_config=aws_config)

"""
    list_user_groups(aws_account_id, namespace, user_name)
    list_user_groups(aws_account_id, namespace, user_name, params::Dict{String,<:Any})

Lists the Amazon QuickSight groups that an Amazon QuickSight user is a member of.

# Arguments
- `aws_account_id`: The AWS account ID that the user is in. Currently, you use the ID for
  the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.
- `user_name`: The Amazon QuickSight user name that you want to list group memberships for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return from this request.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_user_groups(AwsAccountId, Namespace, UserName; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/groups"; aws_config=aws_config)
list_user_groups(AwsAccountId, Namespace, UserName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)/groups", params; aws_config=aws_config)

"""
    list_users(aws_account_id, namespace)
    list_users(aws_account_id, namespace, params::Dict{String,<:Any})

Returns a list of all of the Amazon QuickSight users belonging to this account.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `namespace`: The namespace. Currently, you should set this to default.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"max-results"`: The maximum number of results to return from this request.
- `"next-token"`: A pagination token that can be used in a subsequent request.
"""
list_users(AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users"; aws_config=aws_config)
list_users(AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("GET", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", params; aws_config=aws_config)

"""
    register_user(aws_account_id, email, identity_type, namespace, user_role)
    register_user(aws_account_id, email, identity_type, namespace, user_role, params::Dict{String,<:Any})

Creates an Amazon QuickSight user, whose identity is associated with the AWS Identity and
Access Management (IAM) identity or role specified in the request.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `email`: The email address of the user that you want to register.
- `identity_type`: Amazon QuickSight supports several ways of managing the identity of
  users. This parameter accepts two values:    IAM: A user whose identity maps to an existing
  IAM user or role.     QUICKSIGHT: A user whose identity is owned and managed internally by
  Amazon QuickSight.
- `namespace`: The namespace. Currently, you should set this to default.
- `user_role`: The Amazon QuickSight role for the user. The user role can be one of the
  following:    READER: A user who has read-only access to dashboards.    AUTHOR: A user who
  can create data sources, datasets, analyses, and dashboards.    ADMIN: A user who is an
  author, who can also manage Amazon QuickSight settings.    RESTRICTED_READER: This role
  isn't currently available for use.    RESTRICTED_AUTHOR: This role isn't currently
  available for use.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CustomPermissionsName"`: (Enterprise edition only) The name of the custom permissions
  profile that you want to assign to this user. Customized permissions allows you to control
  a user's access by restricting access the following operations:   Create and update data
  sources   Create and update datasets   Create and update email reports   Subscribe to email
  reports   To add custom permissions to an existing user, use  UpdateUser  instead. A set of
  custom permissions includes any combination of these restrictions. Currently, you need to
  create the profile names for custom permission sets by using the QuickSight console. Then,
  you use the RegisterUser API operation to assign the named set of permissions to a
  QuickSight user.  QuickSight custom permissions are applied through IAM policies.
  Therefore, they override the permissions typically granted by assigning QuickSight users to
  one of the default security cohorts in QuickSight (admin, author, reader). This feature is
  available only to QuickSight Enterprise edition subscriptions that use SAML 2.0-Based
  Federation for Single Sign-On (SSO).
- `"IamArn"`: The ARN of the IAM user or role that you are registering with Amazon
  QuickSight.
- `"SessionName"`: You need to use this parameter only when you register one or more users
  using an assumed IAM role. You don't need to provide the session name for other scenarios,
  for example when you are registering an IAM user or an Amazon QuickSight user. You can
  register multiple users using the same IAM role if each user has a different session name.
  For more information on assuming IAM roles, see  assume-role  in the AWS CLI Reference.
- `"UserName"`: The Amazon QuickSight user name that you want to create for the user you
  are registering.
"""
register_user(AwsAccountId, Email, IdentityType, Namespace, UserRole; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", Dict{String, Any}("Email"=>Email, "IdentityType"=>IdentityType, "UserRole"=>UserRole); aws_config=aws_config)
register_user(AwsAccountId, Email, IdentityType, Namespace, UserRole, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Email"=>Email, "IdentityType"=>IdentityType, "UserRole"=>UserRole), params)); aws_config=aws_config)

"""
    restore_analysis(analysis_id, aws_account_id)
    restore_analysis(analysis_id, aws_account_id, params::Dict{String,<:Any})

Restores an analysis.

# Arguments
- `analysis_id`: The ID of the analysis that you're restoring.
- `aws_account_id`: The ID of the AWS account that contains the analysis.

"""
restore_analysis(AnalysisId, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/restore/analyses/$(AnalysisId)"; aws_config=aws_config)
restore_analysis(AnalysisId, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/restore/analyses/$(AnalysisId)", params; aws_config=aws_config)

"""
    search_analyses(aws_account_id, filters)
    search_analyses(aws_account_id, filters, params::Dict{String,<:Any})

Searches for analyses that belong to the user specified in the filter.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the analyses that you're
  searching for.
- `filters`: The structure for the search filters that you want to apply to your search.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to return.
- `"NextToken"`: A pagination token that can be used in a subsequent request.
"""
search_analyses(AwsAccountId, Filters; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/search/analyses", Dict{String, Any}("Filters"=>Filters); aws_config=aws_config)
search_analyses(AwsAccountId, Filters, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/search/analyses", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Filters"=>Filters), params)); aws_config=aws_config)

"""
    search_dashboards(aws_account_id, filters)
    search_dashboards(aws_account_id, filters, params::Dict{String,<:Any})

Searches for dashboards that belong to a user.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the user whose dashboards
  you're searching for.
- `filters`: The filters to apply to the search. Currently, you can search only by user
  name, for example, \"Filters\": [ { \"Name\": \"QUICKSIGHT_USER\", \"Operator\":
  \"StringEquals\", \"Value\": \"arn:aws:quicksight:us-east-1:1:user/default/UserName1\" } ]

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"MaxResults"`: The maximum number of results to be returned per request.
- `"NextToken"`: The token for the next set of results, or null if there are no more
  results.
"""
search_dashboards(AwsAccountId, Filters; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/search/dashboards", Dict{String, Any}("Filters"=>Filters); aws_config=aws_config)
search_dashboards(AwsAccountId, Filters, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/search/dashboards", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Filters"=>Filters), params)); aws_config=aws_config)

"""
    tag_resource(resource_arn, tags)
    tag_resource(resource_arn, tags, params::Dict{String,<:Any})

Assigns one or more tags (key-value pairs) to the specified QuickSight resource.  Tags can
help you organize and categorize your resources. You can also use them to scope user
permissions, by granting a user permission to access or change only resources with certain
tag values. You can use the TagResource operation with a resource that already has tags. If
you specify a new tag key for the resource, this tag is appended to the list of tags
associated with the resource. If you specify a tag key that is already associated with the
resource, the new tag value that you specify replaces the previous value for that tag. You
can associate as many as 50 tags with a resource. QuickSight supports tagging on data set,
data source, dashboard, and template.  Tagging for QuickSight works in a similar way to
tagging for other AWS services, except for the following:   You can't use tags to track AWS
costs for QuickSight. This restriction is because QuickSight costs are based on users and
SPICE capacity, which aren't taggable resources.   QuickSight doesn't currently support the
Tag Editor for AWS Resource Groups.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource that you want to tag.
- `tags`: Contains a map of the key-value pairs for the resource tag or tags assigned to
  the resource.

"""
tag_resource(ResourceArn, Tags; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/resources/$(ResourceArn)/tags", Dict{String, Any}("Tags"=>Tags); aws_config=aws_config)
tag_resource(ResourceArn, Tags, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/resources/$(ResourceArn)/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Tags"=>Tags), params)); aws_config=aws_config)

"""
    untag_resource(resource_arn, keys)
    untag_resource(resource_arn, keys, params::Dict{String,<:Any})

Removes a tag or tags from a resource.

# Arguments
- `resource_arn`: The Amazon Resource Name (ARN) of the resource that you want to untag.
- `keys`: The keys of the key-value pairs for the resource tag or tags assigned to the
  resource.

"""
untag_resource(ResourceArn, keys; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/resources/$(ResourceArn)/tags", Dict{String, Any}("keys"=>keys); aws_config=aws_config)
untag_resource(ResourceArn, keys, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("DELETE", "/resources/$(ResourceArn)/tags", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("keys"=>keys), params)); aws_config=aws_config)

"""
    update_account_customization(account_customization, aws_account_id)
    update_account_customization(account_customization, aws_account_id, params::Dict{String,<:Any})

Updates Amazon QuickSight customizations the current AWS Region. Currently, the only
customization you can use is a theme. You can use customizations for your AWS account or,
if you specify a namespace, for a QuickSight namespace instead. Customizations that apply
to a namespace override customizations that apply to an AWS account. To find out which
customizations apply, use the DescribeAccountCustomization API operation.

# Arguments
- `account_customization`: The QuickSight customizations you're updating in the current AWS
  Region.
- `aws_account_id`: The ID for the AWS account that you want to update QuickSight
  customizations for.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"namespace"`: The namespace that you want to update QuickSight customizations for.
"""
update_account_customization(AccountCustomization, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}("AccountCustomization"=>AccountCustomization); aws_config=aws_config)
update_account_customization(AccountCustomization, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/customizations", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("AccountCustomization"=>AccountCustomization), params)); aws_config=aws_config)

"""
    update_account_settings(aws_account_id, default_namespace)
    update_account_settings(aws_account_id, default_namespace, params::Dict{String,<:Any})

Updates the Amazon QuickSight settings in your AWS account.

# Arguments
- `aws_account_id`: The ID for the AWS account that contains the QuickSight settings that
  you want to list.
- `default_namespace`: The default namespace for this AWS account. Currently, the default
  is default. AWS Identity and Access Management (IAM) users that register for the first time
  with QuickSight provide an email that becomes associated with the default namespace.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"NotificationEmail"`: The email address that you want QuickSight to send notifications
  to regarding your AWS account or QuickSight subscription.
"""
update_account_settings(AwsAccountId, DefaultNamespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/settings", Dict{String, Any}("DefaultNamespace"=>DefaultNamespace); aws_config=aws_config)
update_account_settings(AwsAccountId, DefaultNamespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/settings", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("DefaultNamespace"=>DefaultNamespace), params)); aws_config=aws_config)

"""
    update_analysis(analysis_id, aws_account_id, name, source_entity)
    update_analysis(analysis_id, aws_account_id, name, source_entity, params::Dict{String,<:Any})

Updates an analysis in Amazon QuickSight

# Arguments
- `analysis_id`: The ID for the analysis that you're updating. This ID displays in the URL
  of the analysis.
- `aws_account_id`: The ID of the AWS account that contains the analysis that you're
  updating.
- `name`: A descriptive name for the analysis that you're updating. This name displays for
  the analysis in the QuickSight console.
- `source_entity`: A source entity to use for the analysis that you're updating. This
  metadata structure contains details that describe a source template and one or more
  datasets.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Parameters"`: The parameter names and override values that you want to use. An analysis
  can have any parameter type, and some parameters might accept multiple values.
- `"ThemeArn"`: The Amazon Resource Name (ARN) for the theme to apply to the analysis that
  you're creating. To see the theme in the QuickSight console, make sure that you have access
  to it.
"""
update_analysis(AnalysisId, AwsAccountId, Name, SourceEntity; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity); aws_config=aws_config)
update_analysis(AnalysisId, AwsAccountId, Name, SourceEntity, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    update_analysis_permissions(analysis_id, aws_account_id)
    update_analysis_permissions(analysis_id, aws_account_id, params::Dict{String,<:Any})

Updates the read and write permissions for an analysis.

# Arguments
- `analysis_id`: The ID of the analysis whose permissions you're updating. The ID is part
  of the analysis URL.
- `aws_account_id`: The ID of the AWS account that contains the analysis whose permissions
  you're updating. You must be using the AWS account that the analysis is in.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: A structure that describes the permissions to add and the principal
  to add them to.
- `"RevokePermissions"`: A structure that describes the permissions to remove and the
  principal to remove them from.
"""
update_analysis_permissions(AnalysisId, AwsAccountId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)/permissions"; aws_config=aws_config)
update_analysis_permissions(AnalysisId, AwsAccountId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/analyses/$(AnalysisId)/permissions", params; aws_config=aws_config)

"""
    update_dashboard(aws_account_id, dashboard_id, name, source_entity)
    update_dashboard(aws_account_id, dashboard_id, name, source_entity, params::Dict{String,<:Any})

Updates a dashboard in an AWS account.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  updating.
- `dashboard_id`: The ID for the dashboard.
- `name`: The display name of the dashboard.
- `source_entity`: The entity that you are using as a source when you update the dashboard.
  In SourceEntity, you specify the type of object you're using as source. You can only update
  a dashboard from a template, so you use a SourceTemplate entity. If you need to update a
  dashboard from an analysis, first convert the analysis to a template by using the
  CreateTemplate API operation. For SourceTemplate, specify the Amazon Resource Name (ARN) of
  the source template. The SourceTemplate ARN can contain any AWS Account and any
  QuickSight-supported AWS Region.  Use the DataSetReferences entity within SourceTemplate to
  list the replacement datasets for the placeholders listed in the original. The schema in
  each dataset must match its placeholder.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"DashboardPublishOptions"`: Options for publishing the dashboard when you create it:
  AvailabilityStatus for AdHocFilteringOption - This status can be either ENABLED or
  DISABLED. When this is set to DISABLED, QuickSight disables the left filter pane on the
  published dashboard, which can be used for ad hoc (one-time) filtering. This option is
  ENABLED by default.     AvailabilityStatus for ExportToCSVOption - This status can be
  either ENABLED or DISABLED. The visual option to export data to .CSV format isn't enabled
  when this is set to DISABLED. This option is ENABLED by default.     VisibilityState for
  SheetControlsOption - This visibility state can be either COLLAPSED or EXPANDED. This
  option is COLLAPSED by default.
- `"Parameters"`: A structure that contains the parameters of the dashboard. These are
  parameter overrides for a dashboard. A dashboard can have any type of parameters, and some
  parameters might accept multiple values.
- `"ThemeArn"`: The Amazon Resource Name (ARN) of the theme that is being used for this
  dashboard. If you add a value for this field, it overrides the value that was originally
  associated with the entity. The theme ARN must exist in the same AWS account where you
  create the dashboard.
- `"VersionDescription"`: A description for the first version of the dashboard being
  created.
"""
update_dashboard(AwsAccountId, DashboardId, Name, SourceEntity; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity); aws_config=aws_config)
update_dashboard(AwsAccountId, DashboardId, Name, SourceEntity, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name, "SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    update_dashboard_permissions(aws_account_id, dashboard_id)
    update_dashboard_permissions(aws_account_id, dashboard_id, params::Dict{String,<:Any})

Updates read and write permissions on a dashboard.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard whose permissions
  you're updating.
- `dashboard_id`: The ID for the dashboard.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: The permissions that you want to grant on this resource.
- `"RevokePermissions"`: The permissions that you want to revoke from this resource.
"""
update_dashboard_permissions(AwsAccountId, DashboardId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions"; aws_config=aws_config)
update_dashboard_permissions(AwsAccountId, DashboardId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/permissions", params; aws_config=aws_config)

"""
    update_dashboard_published_version(aws_account_id, dashboard_id, version_number)
    update_dashboard_published_version(aws_account_id, dashboard_id, version_number, params::Dict{String,<:Any})

Updates the published version of a dashboard.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the dashboard that you're
  updating.
- `dashboard_id`: The ID for the dashboard.
- `version_number`: The version number of the dashboard.

"""
update_dashboard_published_version(AwsAccountId, DashboardId, VersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions/$(VersionNumber)"; aws_config=aws_config)
update_dashboard_published_version(AwsAccountId, DashboardId, VersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/dashboards/$(DashboardId)/versions/$(VersionNumber)", params; aws_config=aws_config)

"""
    update_data_set(aws_account_id, data_set_id, import_mode, name, physical_table_map)
    update_data_set(aws_account_id, data_set_id, import_mode, name, physical_table_map, params::Dict{String,<:Any})

Updates a dataset.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID for the dataset that you want to update. This ID is unique per AWS
  Region for each AWS account.
- `import_mode`: Indicates whether you want to import the data into SPICE.
- `name`: The display name for the dataset.
- `physical_table_map`: Declares the physical tables that are available in the underlying
  data sources.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"ColumnGroups"`: Groupings of columns that work together in certain QuickSight features.
  Currently, only geospatial hierarchy is supported.
- `"ColumnLevelPermissionRules"`: A set of one or more definitions of a
  ColumnLevelPermissionRule .
- `"FieldFolders"`: The folder that contains fields and nested subfolders for your dataset.
- `"LogicalTableMap"`: Configures the combination and transformation of the data from the
  physical tables.
- `"RowLevelPermissionDataSet"`: The row-level security configuration for the data you want
  to create.
"""
update_data_set(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", Dict{String, Any}("ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap); aws_config=aws_config)
update_data_set(AwsAccountId, DataSetId, ImportMode, Name, PhysicalTableMap, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ImportMode"=>ImportMode, "Name"=>Name, "PhysicalTableMap"=>PhysicalTableMap), params)); aws_config=aws_config)

"""
    update_data_set_permissions(aws_account_id, data_set_id)
    update_data_set_permissions(aws_account_id, data_set_id, params::Dict{String,<:Any})

Updates the permissions on a dataset. The permissions resource is
arn:aws:quicksight:region:aws-account-id:dataset/data-set-id.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_set_id`: The ID for the dataset whose permissions you want to update. This ID is
  unique per AWS Region for each AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: The resource permissions that you want to grant to the dataset.
- `"RevokePermissions"`: The resource permissions that you want to revoke from the dataset.
"""
update_data_set_permissions(AwsAccountId, DataSetId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions"; aws_config=aws_config)
update_data_set_permissions(AwsAccountId, DataSetId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sets/$(DataSetId)/permissions", params; aws_config=aws_config)

"""
    update_data_source(aws_account_id, data_source_id, name)
    update_data_source(aws_account_id, data_source_id, name, params::Dict{String,<:Any})

Updates a data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: The ID of the data source. This ID is unique per AWS Region for each
  AWS account.
- `name`: A display name for the data source.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Credentials"`: The credentials that QuickSight that uses to connect to your underlying
  source. Currently, only credentials based on user name and password are supported.
- `"DataSourceParameters"`: The parameters that QuickSight uses to connect to your
  underlying source.
- `"SslProperties"`: Secure Socket Layer (SSL) properties that apply when QuickSight
  connects to your underlying source.
- `"VpcConnectionProperties"`: Use this parameter only when you want QuickSight to use a
  VPC connection when connecting to your underlying source.
"""
update_data_source(AwsAccountId, DataSourceId, Name; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", Dict{String, Any}("Name"=>Name); aws_config=aws_config)
update_data_source(AwsAccountId, DataSourceId, Name, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Name"=>Name), params)); aws_config=aws_config)

"""
    update_data_source_permissions(aws_account_id, data_source_id)
    update_data_source_permissions(aws_account_id, data_source_id, params::Dict{String,<:Any})

Updates the permissions to a data source.

# Arguments
- `aws_account_id`: The AWS account ID.
- `data_source_id`: The ID of the data source. This ID is unique per AWS Region for each
  AWS account.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: A list of resource permissions that you want to grant on the data
  source.
- `"RevokePermissions"`: A list of resource permissions that you want to revoke on the data
  source.
"""
update_data_source_permissions(AwsAccountId, DataSourceId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions"; aws_config=aws_config)
update_data_source_permissions(AwsAccountId, DataSourceId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("POST", "/accounts/$(AwsAccountId)/data-sources/$(DataSourceId)/permissions", params; aws_config=aws_config)

"""
    update_group(aws_account_id, group_name, namespace)
    update_group(aws_account_id, group_name, namespace, params::Dict{String,<:Any})

Changes a group description.

# Arguments
- `aws_account_id`: The ID for the AWS account that the group is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `group_name`: The name of the group that you want to update.
- `namespace`: The namespace. Currently, you should set this to default.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Description"`: The description for the group that you want to update.
"""
update_group(AwsAccountId, GroupName, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)"; aws_config=aws_config)
update_group(AwsAccountId, GroupName, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/groups/$(GroupName)", params; aws_config=aws_config)

"""
    update_iampolicy_assignment(assignment_name, aws_account_id, namespace)
    update_iampolicy_assignment(assignment_name, aws_account_id, namespace, params::Dict{String,<:Any})

Updates an existing IAM policy assignment. This operation updates only the optional
parameter or parameters that are specified in the request. This overwrites all of the users
included in Identities.

# Arguments
- `assignment_name`: The name of the assignment, also called a rule. This name must be
  unique within an AWS account.
- `aws_account_id`: The ID of the AWS account that contains the IAM policy assignment.
- `namespace`: The namespace of the assignment.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"AssignmentStatus"`: The status of the assignment. Possible values are as follows:
  ENABLED - Anything specified in this assignment is used when creating the data source.
  DISABLED - This assignment isn't used when creating the data source.    DRAFT - This
  assignment is an unfinished draft and isn't used when creating the data source.
- `"Identities"`: The QuickSight users, groups, or both that you want to assign the policy
  to.
- `"PolicyArn"`: The ARN for the IAM policy to apply to the QuickSight users and groups
  specified in this assignment.
"""
update_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)"; aws_config=aws_config)
update_iampolicy_assignment(AssignmentName, AwsAccountId, Namespace, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/iam-policy-assignments/$(AssignmentName)", params; aws_config=aws_config)

"""
    update_template(aws_account_id, source_entity, template_id)
    update_template(aws_account_id, source_entity, template_id, params::Dict{String,<:Any})

Updates a template from an existing Amazon QuickSight analysis or another template.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template that you're
  updating.
- `source_entity`: The entity that you are using as a source when you update the template.
  In SourceEntity, you specify the type of object you're using as source: SourceTemplate for
  a template or SourceAnalysis for an analysis. Both of these require an Amazon Resource Name
  (ARN). For SourceTemplate, specify the ARN of the source template. For SourceAnalysis,
  specify the ARN of the source analysis. The SourceTemplate ARN can contain any AWS Account
  and any QuickSight-supported AWS Region.  Use the DataSetReferences entity within
  SourceTemplate or SourceAnalysis to list the replacement datasets for the placeholders
  listed in the original. The schema in each dataset must match its placeholder.
- `template_id`: The ID for the template.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Name"`: The name for the template.
- `"VersionDescription"`: A description of the current template version that is being
  updated. Every time you call UpdateTemplate, you create a new version of the template. Each
  version of the template maintains a description of the version in the VersionDescription
  field.
"""
update_template(AwsAccountId, SourceEntity, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}("SourceEntity"=>SourceEntity); aws_config=aws_config)
update_template(AwsAccountId, SourceEntity, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("SourceEntity"=>SourceEntity), params)); aws_config=aws_config)

"""
    update_template_alias(alias_name, aws_account_id, template_id, template_version_number)
    update_template_alias(alias_name, aws_account_id, template_id, template_version_number, params::Dict{String,<:Any})

Updates the template alias of a template.

# Arguments
- `alias_name`: The alias of the template that you want to update. If you name a specific
  alias, you update the version that the alias points to. You can specify the latest version
  of the template by providing the keyword LATEST in the AliasName parameter. The keyword
  PUBLISHED doesn't apply to templates.
- `aws_account_id`: The ID of the AWS account that contains the template alias that you're
  updating.
- `template_id`: The ID for the template.
- `template_version_number`: The version number of the template.

"""
update_template_alias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber); aws_config=aws_config)
update_template_alias(AliasName, AwsAccountId, TemplateId, TemplateVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/aliases/$(AliasName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("TemplateVersionNumber"=>TemplateVersionNumber), params)); aws_config=aws_config)

"""
    update_template_permissions(aws_account_id, template_id)
    update_template_permissions(aws_account_id, template_id, params::Dict{String,<:Any})

Updates the resource permissions for a template.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the template.
- `template_id`: The ID for the template.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: A list of resource permissions to be granted on the template.
- `"RevokePermissions"`: A list of resource permissions to be revoked from the template.
"""
update_template_permissions(AwsAccountId, TemplateId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions"; aws_config=aws_config)
update_template_permissions(AwsAccountId, TemplateId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/templates/$(TemplateId)/permissions", params; aws_config=aws_config)

"""
    update_theme(aws_account_id, base_theme_id, theme_id)
    update_theme(aws_account_id, base_theme_id, theme_id, params::Dict{String,<:Any})

Updates a theme.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme that you're updating.
- `base_theme_id`: The theme ID, defined by Amazon QuickSight, that a custom theme inherits
  from. All themes initially inherit from a default QuickSight theme.
- `theme_id`: The ID for the theme.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"Configuration"`: The theme configuration, which contains the theme display properties.
- `"Name"`: The name for the theme.
- `"VersionDescription"`: A description of the theme version that you're updating Every
  time that you call UpdateTheme, you create a new version of the theme. Each version of the
  theme maintains a description of the version in VersionDescription.
"""
update_theme(AwsAccountId, BaseThemeId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}("BaseThemeId"=>BaseThemeId); aws_config=aws_config)
update_theme(AwsAccountId, BaseThemeId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("BaseThemeId"=>BaseThemeId), params)); aws_config=aws_config)

"""
    update_theme_alias(alias_name, aws_account_id, theme_id, theme_version_number)
    update_theme_alias(alias_name, aws_account_id, theme_id, theme_version_number, params::Dict{String,<:Any})

Updates an alias of a theme.

# Arguments
- `alias_name`: The name of the theme alias that you want to update.
- `aws_account_id`: The ID of the AWS account that contains the theme alias that you're
  updating.
- `theme_id`: The ID for the theme.
- `theme_version_number`: The version number of the theme that the alias should reference.

"""
update_theme_alias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber); aws_config=aws_config)
update_theme_alias(AliasName, AwsAccountId, ThemeId, ThemeVersionNumber, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/aliases/$(AliasName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("ThemeVersionNumber"=>ThemeVersionNumber), params)); aws_config=aws_config)

"""
    update_theme_permissions(aws_account_id, theme_id)
    update_theme_permissions(aws_account_id, theme_id, params::Dict{String,<:Any})

Updates the resource permissions for a theme. Permissions apply to the action to grant or
revoke permissions on, for example \"quicksight:DescribeTheme\". Theme permissions apply in
groupings. Valid groupings include the following for the three levels of permissions, which
are user, owner, or no permissions:    User    \"quicksight:DescribeTheme\"
\"quicksight:DescribeThemeAlias\"     \"quicksight:ListThemeAliases\"
\"quicksight:ListThemeVersions\"      Owner    \"quicksight:DescribeTheme\"
\"quicksight:DescribeThemeAlias\"     \"quicksight:ListThemeAliases\"
\"quicksight:ListThemeVersions\"     \"quicksight:DeleteTheme\"
\"quicksight:UpdateTheme\"     \"quicksight:CreateThemeAlias\"
\"quicksight:DeleteThemeAlias\"     \"quicksight:UpdateThemeAlias\"
\"quicksight:UpdateThemePermissions\"     \"quicksight:DescribeThemePermissions\"      To
specify no permissions, omit the permissions list.

# Arguments
- `aws_account_id`: The ID of the AWS account that contains the theme.
- `theme_id`: The ID for the theme.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"GrantPermissions"`: A list of resource permissions to be granted for the theme.
- `"RevokePermissions"`: A list of resource permissions to be revoked from the theme.
"""
update_theme_permissions(AwsAccountId, ThemeId; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions"; aws_config=aws_config)
update_theme_permissions(AwsAccountId, ThemeId, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/themes/$(ThemeId)/permissions", params; aws_config=aws_config)

"""
    update_user(aws_account_id, email, namespace, role, user_name)
    update_user(aws_account_id, email, namespace, role, user_name, params::Dict{String,<:Any})

Updates an Amazon QuickSight user.

# Arguments
- `aws_account_id`: The ID for the AWS account that the user is in. Currently, you use the
  ID for the AWS account that contains your Amazon QuickSight account.
- `email`: The email address of the user that you want to update.
- `namespace`: The namespace. Currently, you should set this to default.
- `role`: The Amazon QuickSight role of the user. The role can be one of the following
  default security cohorts:    READER: A user who has read-only access to dashboards.
  AUTHOR: A user who can create data sources, datasets, analyses, and dashboards.    ADMIN: A
  user who is an author, who can also manage Amazon QuickSight settings.   The name of the
  QuickSight role is invisible to the user except for the console screens dealing with
  permissions.
- `user_name`: The Amazon QuickSight user name that you want to update.

# Optional Parameters
Optional parameters can be passed as a `params::Dict{String,<:Any}`. Valid keys are:
- `"CustomPermissionsName"`: (Enterprise edition only) The name of the custom permissions
  profile that you want to assign to this user. Customized permissions allows you to control
  a user's access by restricting access the following operations:   Create and update data
  sources   Create and update datasets   Create and update email reports   Subscribe to email
  reports   A set of custom permissions includes any combination of these restrictions.
  Currently, you need to create the profile names for custom permission sets by using the
  QuickSight console. Then, you use the RegisterUser API operation to assign the named set of
  permissions to a QuickSight user.  QuickSight custom permissions are applied through IAM
  policies. Therefore, they override the permissions typically granted by assigning
  QuickSight users to one of the default security cohorts in QuickSight (admin, author,
  reader). This feature is available only to QuickSight Enterprise edition subscriptions that
  use SAML 2.0-Based Federation for Single Sign-On (SSO).
- `"UnapplyCustomPermissions"`: A flag that you use to indicate that you want to remove all
  custom permissions from this user. Using this parameter resets the user to the state it was
  in before a custom permissions profile was applied. This parameter defaults to NULL and it
  doesn't accept any other value.
"""
update_user(AwsAccountId, Email, Namespace, Role, UserName; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", Dict{String, Any}("Email"=>Email, "Role"=>Role); aws_config=aws_config)
update_user(AwsAccountId, Email, Namespace, Role, UserName, params::AbstractDict{String, <:Any}; aws_config::AbstractAWSConfig=global_aws_config()) = quicksight("PUT", "/accounts/$(AwsAccountId)/namespaces/$(Namespace)/users/$(UserName)", Dict{String, Any}(mergewith(_merge, Dict{String, Any}("Email"=>Email, "Role"=>Role), params)); aws_config=aws_config)
